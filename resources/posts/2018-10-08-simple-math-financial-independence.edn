{:title "The surprisingly simple road financial independence"
 :draft? true
 :content
 (fn [{:keys [slug]}]
   [:div.has-text-left
    [:p [:strong "Financial Independence"] " "]
    [:h4 "How much do I need"]
    [:p "The answer to this question is very simple. How much money do you spend in a month?"
     [:small ]]
    [:div.field
     [:div.control #_has-icons-left
      [:input.input
       {:id      "monthly-spend" :type "number" :placeholder "Your Monthly Spend?"
        :onkeyup "s.p.onchange('expenses', this)"}]
      #_[:span.icon.is-small.is-left [:i.fas.fa-user]]]
     [:p.help.is-grey "Everything except monthly retirement savings"]]
    [:p "You would need "
     [:strong.is-size-4.has-text-danger
      {:id "retire-amount"}
      "____"]
     " saved if you wanted to retire today! As easy as that. To know how much you need we simply use what is called "
     [:a "the 4% rule"] " and multiply your monthy expenses by 300."]


    [:h4 "How long will it take?"]

    [:div.field
     [:div.control #_has-icons-left
      [:input.input
       {:id      "saving" :type "number" :placeholder "Monthly savings for retirment"
        :onkeyup "s.p.onchange('savings', this)"}]
      #_[:span.icon.is-small.is-left [:i.fas.fa-user]]]
     [:p.help.is-grey ""]]

    [:div.field
     [:div.control #_has-icons-left
      [:input.input
       {:id "net-worth" :type "number" :placeholder "All your monies?"
        :onkeyup "s.p.onchange('net-worth', this)"}]
      #_[:span.icon.is-small.is-left [:i.fas.fa-user]]]
     [:p.help.is-grey "Your house and car should not be added"]]

    [:div.field
     [:div.control #_has-icons-left
      [:input.input
       {:id "interest" :type "range" :min 1 :max 10 :step 1 :value 5
        :oninput "s.p.onchange('interest', this)"}]
      #_[:span.icon.is-small.is-left [:i.fas.fa-user]]]
     [:p.help.is-grey "interest above inflation"]]

    [:div.field
     [:div.control #_has-icons-left
      [:input.input
       {:id "withdraw-rate" :type "range" :min 1 :max 5 :step 1 :value 4
        :oninput "s.p.onchange('withdraw-rate', this)"}]
      #_[:span.icon.is-small.is-left [:i.fas.fa-user]]]
     [:p.help.is-grey "withdraw-rate"]]

    [:strong.is-size-4.has-text-danger
     {:id "savings-rate"} "___"]
    [:br]
    [:strong.is-size-4.has-text-danger
     {:id "years-left"} "___"]

    [:div.columns
     [:div.column.is-half
      [:table.table.is-narrow.has-text-weight-bold
       [:thead [:tr [:th "Savings Rate"] [:th "Years Left"]]]
       [:tbody {:id "years"}]]]]



    (sneakycode.cljs/compile-cljs
     true slug "s.p"
     (ns s.p
       (:require [clojure.string :as string]))

     ;; HELPERS

     (defn nice-number [n]
       (loop [s      (str n)
              result '()]
         (if (empty? s)
           (string/join " " result)
           (recur
            (string/join "" (drop-last 3 s))
            (conj result (string/join "" (take-last 3 s)))))))

     (defn usable? [n] (> n 0))


     (defn calc-savings-rate [expenses savings]
       (max 0 (js/Math.round (* 100 (- 1 (/ expenses (+ expenses savings)))))))


     (def assumed-return-after-inflation 5)
     (def assumed-safe-withdrawal-rate 4)

     (defn years-till-financially-independent
       "Implements the spreadsheet found here
        https://www.mrmoneymustache.com/2012/01/13/the-shockingly-simple-math-behind-early-retirement/"
       ([net-worth take-home-pay saving-rate]
        (years-till-financially-independent
         net-worth take-home-pay assumed-return-after-inflation saving-rate assumed-safe-withdrawal-rate))
       ([net-worth take-home-pay return-after-inflation saving-rate withdrawal-rate]
        (let [years-of-take-home-pay (/ net-worth (* take-home-pay 12))
              return-after-inflation (/ return-after-inflation 100)
              saving-rate            (/ saving-rate 100)]
          (loop
              [year                       0
               investment-gains           0
               years-of-take-home-income  years-of-take-home-pay
               stash-relative-to-spending 0
               withdraw-spend-percent     0]
            (if (or (>= year 1000) (>= withdraw-spend-percent 100))
              year
              (let [year'                       (inc year)
                    investment-gains'
                    (+
                     (-
                      (*
                       years-of-take-home-income
                       (+
                        1
                        return-after-inflation))
                      years-of-take-home-income)
                     (*
                      (/
                       saving-rate
                       2)
                      return-after-inflation))
                    years-of-take-home-income'  (+ (+ years-of-take-home-income investment-gains') saving-rate)
                    stash-relative-to-spending' (/ years-of-take-home-income' (- 1 saving-rate))
                    withdraw-spend-percent'     (* stash-relative-to-spending' withdrawal-rate)
                    ]
                (recur
                 year' investment-gains' years-of-take-home-income'
                 stash-relative-to-spending' withdraw-spend-percent')))))))


     ;; ELEMENTS

     (def retire-amount-el (js/document.getElementById "retire-amount"))
     (def savings-rate-el (js/document.getElementById "savings-rate"))
     (def years-left-el (js/document.getElementById "years-left"))
     (def years-el (js/document.getElementById "years"))


     ;; STATE

     (def *state (atom {:withdraw-rate 4
                        :interest 5}))


     (defn update-view []
       (let [{:keys [retire-amount savings-rate years-left years]} @*state]
         (prn @*state)
         (when retire-amount
           (set! (.-innerHTML retire-amount-el) (nice-number retire-amount)))
         (when savings-rate
           (set! (.-innerHTML savings-rate-el) (str savings-rate "%")))
         (when years-left
           (set! (.-innerHTML years-left-el) (if (> years-left 1000) "> 1000" years-left)))
         (when years
           (let [html (->> years
                           (sort-by first)
                           reverse
                           (map (fn [[rate years you?]]
                                  (str
                                   "<tr style='background-color: "
                                   (cond
                                     you?  "#a3c7ff"
                                     (<= years 10) "#83de83"
                                     (<= years 20) "#fdfdac"
                                     (<= years 30) "#fdd283"
                                     (<= years 40) "#ffa1a1"
                                     (> years 40) "#ff7171") "'>"
                                   "<td>" rate "%</td>"
                                   "<td>" years (if you? " (this is you)" "") "</td>"
                                   "</tr>")))
                           (string/join ""))]
             (set! (.-innerHTML years-el) html)))
         ))


     (defn recalculate []
       (let [{:keys [expenses savings net-worth interest withdraw-rate]} @*state
             next
             (cond-> @*state
               (usable? expenses)
               (assoc :retire-amount (* 300 expenses))

               (and (usable? expenses) (usable? savings))
               (merge
                (let [savings-rate (calc-savings-rate expenses savings)
                      income (+ expenses savings)
                      net-worth (if (usable? net-worth) net-worth 0)
                      years-left (years-till-financially-independent net-worth income interest savings-rate withdraw-rate)]
                  {:savings-rate savings-rate
                   :years-left years-left
                   :years [[5 (years-till-financially-independent net-worth income 5)]
                           [10 (years-till-financially-independent net-worth income 10)]
                           [15 (years-till-financially-independent net-worth income 15)]
                           [20 (years-till-financially-independent net-worth income 20)]
                           [30 (years-till-financially-independent net-worth income 30)]
                           [40 (years-till-financially-independent net-worth income 40)]
                           [50 (years-till-financially-independent net-worth income 50)]
                           [60 (years-till-financially-independent net-worth income 60)]
                           [70 (years-till-financially-independent net-worth income 70)]
                           [savings-rate years-left :this-is-you]]})))]
         (reset! *state next)))

     ;; IO

     (defn ^:export onchange [k el]
       (let [value (.-value el)]
         (when-not (string/blank? value)
           (swap! *state assoc (keyword k) (js/parseInt (.-value el)))
           (recalculate)
           (update-view))))

     )])}
