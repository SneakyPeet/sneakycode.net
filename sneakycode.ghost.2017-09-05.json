{"db":[{"meta":{"exported_on":1504590335248,"version":"003"},"data":{"posts":[{"id":2,"uuid":"f2f543af-ba9b-4409-99c5-e732793248cf","title":"Sneaky Who?","slug":"about","markdown":"This blog is about Domain Driven Design, Clean Code and .net. It is also about being awesome ;)\n\nI am a .net developer, living with my wife [Carmen](http://carmengouveia.me/) and kids in Pretoria, South Africa.\n\nI learn new things everyday. I share these things here.\n\nI currently work as a senior software engineer at [Entelect](http://www.entelect.co.za/ \"Entelect\").","html":"<p>This blog is about Domain Driven Design, Clean Code and .net. It is also about being awesome ;)</p>\n\n<p>I am a .net developer, living with my wife <a href=\"http://carmengouveia.me/\">Carmen</a> and kids in Pretoria, South Africa.</p>\n\n<p>I learn new things everyday. I share these things here.</p>\n\n<p>I currently work as a senior software engineer at <a href=\"http://www.entelect.co.za/\" title=\"Entelect\">Entelect</a>.</p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420376605439,"created_by":1,"updated_at":1453734188643,"updated_by":1,"published_at":1420376605445,"published_by":1},{"id":3,"uuid":"6340e799-020f-4f72-a81e-cbe17109082f","title":"Things I want to do in 2015!","slug":"2015","markdown":"I hate new years resolutions, so here are some :P\n\n* Write many blog posts (at least 2 a month)\n* Attend local user groups\n* Spend time on stackoverflow helping others\n* Read more\n* Be amazing at the languages I already know and use (C# and js)\n* Learn a new language (I'm thinking F#)\n* Buy expensive whiskey and share it with dev buddies\n* Learn another musical instrument\n* Go somewhere new\n* Add to this list\n___\n\n####Books to read\n* C# in a Nutshell - Joseph Albahari\n* Domain Driven Design - Eric Evans\n* Elequent Javascript - Marijn Haverbeke \n* Javascript the Good Parts - Douglas Crockford\n* Soft Skills - John Sonmez\n* [moar books]\n\n","html":"<p>I hate new years resolutions, so here are some :P</p>\n\n<ul>\n<li>Write many blog posts (at least 2 a month)</li>\n<li>Attend local user groups</li>\n<li>Spend time on stackoverflow helping others</li>\n<li>Read more</li>\n<li>Be amazing at the languages I already know and use (C# and js)</li>\n<li>Learn a new language (I'm thinking F#)</li>\n<li>Buy expensive whiskey and share it with dev buddies</li>\n<li>Learn another musical instrument</li>\n<li>Go somewhere new</li>\n<li>Add to this list</li>\n</ul>\n\n<hr />\n\n<h4 id=\"bookstoread\">Books to read</h4>\n\n<ul>\n<li>C# in a Nutshell - Joseph Albahari</li>\n<li>Domain Driven Design - Eric Evans</li>\n<li>Elequent Javascript - Marijn Haverbeke </li>\n<li>Javascript the Good Parts - Douglas Crockford</li>\n<li>Soft Skills - John Sonmez</li>\n<li>[moar books]</li>\n</ul>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420376639297,"created_by":1,"updated_at":1421000984685,"updated_by":1,"published_at":1420376639298,"published_by":1},{"id":4,"uuid":"a6243ad0-4cca-4d5c-882f-82eb9867a5dc","title":"Git Goodies That You Might Not Know About: git bisect","slug":"git-bisect","markdown":"I recently found myself with an obscure bug that was introduced into the codebase somewhere in the last 50 commits. To make matters worse the bug was not apparent and was not easily seen when looking at the code. All I knew was when last that feature worked. I ended going through each commit until I found the breaking commit. If only I knew about git bisect.\n\nGit bisect is a debugging tool built into git. It helps you perform a binary search through your commit history for a broken commit. It is great because it does all the heavy lifting for you as you only need to tell it if a commit is good or bad. Git will then select a commit in between the current commit and either the good/bad commit and check that out for you. You then test that commit and repeat the process until git finds you the bad commit.\n\nExample time. Let’s say you know your feature worked in v1.0, but now it is broken.\n\nTo the command line!\n<pre><code class=\"language-bash\">$ git bisect start\n$ git bisect bad</code></pre>\n\nThis tells git to start the bisect process and that the commit you are on is a bad one. Next we need to tell git what the good commit was.\n\n<pre><code class=\"language-bash\">$ git bisect good v1.0</code></pre>\n    \nGit will then automatically checkout a commit somewhere in the middle and give you the amount of revisions to test after the current one. You can then just test the feature. Let’s pretend the feature is still broken. You tell git that this commit is bad.\n\n<pre><code class=\"language-bash\">$ git bisect bad</code></pre>\n\nGit now checks out a commit between this bad boy and v1.0. We pretend the new commit is good so we run\n\n<pre><code class=\"language-bash\">$ git bisect good</code></pre>\n\nAnd so on and so forth. Git will continue the process until there is only the bad commit left. At this point git will provide you with a message like\n    \n<pre><code class=\"language-bash\">40173afa01f57833efec7bcaab82b83b184cd5c8 is the first bad commit\ncommit 40173afa01f57833efec7bcaab82b83b184cd5c8\nAuthor: Jane Doe <jane@somewhere.co.za>\nDate:   Tue Sep 9 17:22:31 2014 +0200</code></pre>\n\nYou can now just check the changes and start giving fines and blames to the culprit.\n\nTo finish the process and return to where you started just run\n\n<pre><code class=\"language-bash\">$ git bisect reset</code></pre>\n\nImportant. It makes a lot of sense to do smaller commits more frequently. It is a lot easier to find a breaking change in 2 or 3 files than it is in a 100. Make branches commit often.\n\n---\n\nMore info on git bisect [here](http://git-scm.com/docs/git-bisect)\n___\n*This post was first published on [blog.entelect.co.za](http://blog.entelect.co.za/home)*\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>I recently found myself with an obscure bug that was introduced into the codebase somewhere in the last 50 commits. To make matters worse the bug was not apparent and was not easily seen when looking at the code. All I knew was when last that feature worked. I ended going through each commit until I found the breaking commit. If only I knew about git bisect.</p>\n\n<p>Git bisect is a debugging tool built into git. It helps you perform a binary search through your commit history for a broken commit. It is great because it does all the heavy lifting for you as you only need to tell it if a commit is good or bad. Git will then select a commit in between the current commit and either the good/bad commit and check that out for you. You then test that commit and repeat the process until git finds you the bad commit.</p>\n\n<p>Example time. Let’s say you know your feature worked in v1.0, but now it is broken.</p>\n\n<p>To the command line!  </p>\n\n<pre><code class=\"language-bash\">$ git bisect start\n$ git bisect bad</code></pre>\n\n<p>This tells git to start the bisect process and that the commit you are on is a bad one. Next we need to tell git what the good commit was.</p>\n\n<pre><code class=\"language-bash\">$ git bisect good v1.0</code></pre>\n\n<p>Git will then automatically checkout a commit somewhere in the middle and give you the amount of revisions to test after the current one. You can then just test the feature. Let’s pretend the feature is still broken. You tell git that this commit is bad.</p>\n\n<pre><code class=\"language-bash\">$ git bisect bad</code></pre>\n\n<p>Git now checks out a commit between this bad boy and v1.0. We pretend the new commit is good so we run</p>\n\n<pre><code class=\"language-bash\">$ git bisect good</code></pre>\n\n<p>And so on and so forth. Git will continue the process until there is only the bad commit left. At this point git will provide you with a message like</p>\n\n<pre><code class=\"language-bash\">40173afa01f57833efec7bcaab82b83b184cd5c8 is the first bad commit\ncommit 40173afa01f57833efec7bcaab82b83b184cd5c8\nAuthor: Jane Doe <jane@somewhere.co.za>\nDate:   Tue Sep 9 17:22:31 2014 +0200</code></pre>\n\n<p>You can now just check the changes and start giving fines and blames to the culprit.</p>\n\n<p>To finish the process and return to where you started just run</p>\n\n<pre><code class=\"language-bash\">$ git bisect reset</code></pre>\n\n<p>Important. It makes a lot of sense to do smaller commits more frequently. It is a lot easier to find a breaking change in 2 or 3 files than it is in a 100. Make branches commit often.</p>\n\n<hr />\n\n<p>More info on git bisect <a href=\"http://git-scm.com/docs/git-bisect\">here</a>  </p>\n\n<hr />\n\n<p><em>This post was first published on <a href=\"http://blog.entelect.co.za/home\">blog.entelect.co.za</a></em></p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420376890815,"created_by":1,"updated_at":1421487778543,"updated_by":1,"published_at":1420376890826,"published_by":1},{"id":5,"uuid":"75a5de95-f9b9-46a3-b27f-919dbd26f7b9","title":"Git Goodies That You Might Not Know About: git stash","slug":"git-stash","markdown":"We sometimes find ourselves with code that does not belong in a commit. This might be because we are on a wrong branch, just trying new things or need to quickly do something else and are not prepared to commit the code yet. Bottom line is we sit with code that we want to persist somehow but that we do not want in our source control history. Enter git stash.\n\nGit stash will save your local modifications away and revert your working directory to match the HEAD commit. You can then at a later stage re-apply these modifications wherever you want.\n\nTo stash your changes you first need to add them so git can track them and then you simply run git stash to stash them.\n<pre><code class=\"language-css\">$ git add\n$ git stash</code></pre>\n\nYour changes have now been pigeon holed and the branch reverted.\n\nThere are two ways to re-apply your stashed code. \n\n<pre><code class=\"language-bash\">$ git stash pop</code></pre>\nPop treats all your stashed changes as a first-in last-out queue. Thus running the pop command will apply your last stash and remove it from your stashed items.\n\n<pre><code class=\"language-bash\">$ git stash apply {stash-id}</code></pre>\nApply will apply a specific stash without removing it from your stash list. \n\nYou can view all stashed items using\n\n<pre><code class=\"language-bash\">$ git stash list</code></pre>\nYou can remove all stashed items or a specific stash using clear and drop respectively.\n\n<pre><code class=\"language-bash\">$ git stash clear\n$ git stash drop {stash-id}</code></pre>\nSimple, effective and awesome. GIT ALL THE THINGS.\n\nRead more here\n\nAlso see [git bisect](/git-bisect/)\n___\n*This post was first published on [blog.entelect.co.za](http://blog.entelect.co.za/home)*\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>We sometimes find ourselves with code that does not belong in a commit. This might be because we are on a wrong branch, just trying new things or need to quickly do something else and are not prepared to commit the code yet. Bottom line is we sit with code that we want to persist somehow but that we do not want in our source control history. Enter git stash.</p>\n\n<p>Git stash will save your local modifications away and revert your working directory to match the HEAD commit. You can then at a later stage re-apply these modifications wherever you want.</p>\n\n<p>To stash your changes you first need to add them so git can track them and then you simply run git stash to stash them.  </p>\n\n<pre><code class=\"language-css\">$ git add\n$ git stash</code></pre>\n\n<p>Your changes have now been pigeon holed and the branch reverted.</p>\n\n<p>There are two ways to re-apply your stashed code. </p>\n\n<pre><code class=\"language-bash\">$ git stash pop</code></pre>\n\n<p>Pop treats all your stashed changes as a first-in last-out queue. Thus running the pop command will apply your last stash and remove it from your stashed items.</p>\n\n<pre><code class=\"language-bash\">$ git stash apply {stash-id}</code></pre>\n\n<p>Apply will apply a specific stash without removing it from your stash list. </p>\n\n<p>You can view all stashed items using</p>\n\n<pre><code class=\"language-bash\">$ git stash list</code></pre>\n\n<p>You can remove all stashed items or a specific stash using clear and drop respectively.</p>\n\n<pre><code class=\"language-bash\">$ git stash clear\n$ git stash drop {stash-id}</code></pre>\n\n<p>Simple, effective and awesome. GIT ALL THE THINGS.</p>\n\n<p>Read more here</p>\n\n<p>Also see <a href=\"/git-bisect/\">git bisect</a>  </p>\n\n<hr />\n\n<p><em>This post was first published on <a href=\"http://blog.entelect.co.za/home\">blog.entelect.co.za</a></em></p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420376984968,"created_by":1,"updated_at":1421487830623,"updated_by":1,"published_at":1420376984969,"published_by":1},{"id":6,"uuid":"973d0a41-2874-4564-9880-15d87819a3e1","title":"Job Tracking using Quartz for .net","slug":"quartz-job-tracking","markdown":"A project that I recently worked on has a worker role that runs about 40 jobs. With some of these jobs running for hours it became imperative that we knew when these jobs were running, if they were currently running, how long they were running, if they were overlapping with other dependent jobs etc.  \n\nBelow I will show you how to easily setup Job Tracking using [quartz-scheduler](http://www.quartz-scheduler.net/) for .net.\n\n**Listeners**\n\nQuartz.net provides us with the concept of Listeners. Listeners are objects that you create to perform actions based on events occurring within the scheduler. Quartz provides the following three listener interfaces:\n\n* ITriggerListener\n* IJobListener\n* ISchedulerListener \n\nEach of these provides you with methods that get called on various events. More info on these can be found [here](http://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/trigger-and-job-listeners.html) and [here](http://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/scheduler-listeners.html).\n\n**Setup**\n\nFirst you need to create the implementation of whatever listener you want.\n<pre><code class=\"csharp\">public class MyJobListener : IJobListener</code></pre>\nThen you need to register the listener with your scheduler.\n<pre><code class=\"csharp\">var scheduler = SchedulerFactory.GetScheduler();\nscheduler.ListenerManager.AddJobListener(myInstanceOfJobListener);\nscheduler.ListenerManager.AddSchedulerListener(myInstanceOfScheduleListener);</code></pre>\nAll that is left is to implement the methods for the events you want to hook into.\nYou can register multiple listeners of the same type.\n\n**Implementation**\n\nFor my solution I hooked into the following methods\nOn IScheduleListener:\n<pre><code class=\"csharp\">public void JobScheduled(ITrigger trigger)\n{\n    var name = trigger.JobKey.Name;\n    DateTime? nextStartDate = null;\n    if (trigger.GetNextFireTimeUtc().HasValue)\n    {\n        nextStartDate = trigger.GetNextFireTimeUtc().Value.DateTime;\n    }\n    //Do something with the information\n}</code></pre>\nThis method gets called each time a job is scheduled. I use this so keep track of all the jobs that are scheduled and can easily extract which jobs have never ran. If you need to you can also extract the trigger type. You can then use the trigger type to form some kind of calendar view of when jobs will run.\n\nOn IJobListener:\n<pre><code class=\"csharp\">public void JobToBeExecuted(IJobExecutionContext context)\n{\n    var name = context.JobDetail.JobType.Name;\n    DateTime startTime = context.FireTimeUtc.HasValue ? context.FireTimeUtc.Value.DateTime : DateTime.UtcNow;\n    //do something with info\n}\n\npublic void JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException)\n{\n    var name = context.JobDetail.JobType.Name;\n    var runtime = context.JobRunTime;\n    if(jobException != null)\n    {\n        //do something with error info\n    }\n\n    DateTime? nextRunDate = null;\n    if(context.NextFireTimeUtc.HasValue)\n    {\n        nextRunDate = context.NextFireTimeUtc.Value.DateTime;\n    }\n    //do something with info\n}</code></pre>\nIt is apparent that these methods get called just before a job executes and just after it finished. JobWasExecuted will get called even if there was an exception and quartz is nice enough to provide you with the exception object.\n\nAs mentioned we use the data gathered to make sure our worker role is in good health. There are various other methods on these interfaces so have a look at the linked documentation.\n___\n*This post was first published on [blog.entelect.co.za](http://blog.entelect.co.za/home)*\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>A project that I recently worked on has a worker role that runs about 40 jobs. With some of these jobs running for hours it became imperative that we knew when these jobs were running, if they were currently running, how long they were running, if they were overlapping with other dependent jobs etc.  </p>\n\n<p>Below I will show you how to easily setup Job Tracking using <a href=\"http://www.quartz-scheduler.net/\">quartz-scheduler</a> for .net.</p>\n\n<p><strong>Listeners</strong></p>\n\n<p>Quartz.net provides us with the concept of Listeners. Listeners are objects that you create to perform actions based on events occurring within the scheduler. Quartz provides the following three listener interfaces:</p>\n\n<ul>\n<li>ITriggerListener</li>\n<li>IJobListener</li>\n<li>ISchedulerListener </li>\n</ul>\n\n<p>Each of these provides you with methods that get called on various events. More info on these can be found <a href=\"http://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/trigger-and-job-listeners.html\">here</a> and <a href=\"http://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/scheduler-listeners.html\">here</a>.</p>\n\n<p><strong>Setup</strong></p>\n\n<p>First you need to create the implementation of whatever listener you want.  </p>\n\n<pre><code class=\"csharp\">public class MyJobListener : IJobListener</code></pre>\n\n<p>Then you need to register the listener with your scheduler.  </p>\n\n<pre><code class=\"csharp\">var scheduler = SchedulerFactory.GetScheduler();\nscheduler.ListenerManager.AddJobListener(myInstanceOfJobListener);\nscheduler.ListenerManager.AddSchedulerListener(myInstanceOfScheduleListener);</code></pre>\n\n<p>All that is left is to implement the methods for the events you want to hook into. <br />\nYou can register multiple listeners of the same type.</p>\n\n<p><strong>Implementation</strong></p>\n\n<p>For my solution I hooked into the following methods <br />\nOn IScheduleListener:  </p>\n\n<pre><code class=\"csharp\">public void JobScheduled(ITrigger trigger)\n{\n    var name = trigger.JobKey.Name;\n    DateTime? nextStartDate = null;\n    if (trigger.GetNextFireTimeUtc().HasValue)\n    {\n        nextStartDate = trigger.GetNextFireTimeUtc().Value.DateTime;\n    }\n    //Do something with the information\n}</code></pre>\n\n<p>This method gets called each time a job is scheduled. I use this so keep track of all the jobs that are scheduled and can easily extract which jobs have never ran. If you need to you can also extract the trigger type. You can then use the trigger type to form some kind of calendar view of when jobs will run.</p>\n\n<p>On IJobListener:  </p>\n\n<pre><code class=\"csharp\">public void JobToBeExecuted(IJobExecutionContext context)\n{\n    var name = context.JobDetail.JobType.Name;\n    DateTime startTime = context.FireTimeUtc.HasValue ? context.FireTimeUtc.Value.DateTime : DateTime.UtcNow;\n    //do something with info\n}\n\npublic void JobWasExecuted(IJobExecutionContext context, JobExecutionException jobException)\n{\n    var name = context.JobDetail.JobType.Name;\n    var runtime = context.JobRunTime;\n    if(jobException != null)\n    {\n        //do something with error info\n    }\n\n    DateTime? nextRunDate = null;\n    if(context.NextFireTimeUtc.HasValue)\n    {\n        nextRunDate = context.NextFireTimeUtc.Value.DateTime;\n    }\n    //do something with info\n}</code></pre>\n\n<p>It is apparent that these methods get called just before a job executes and just after it finished. JobWasExecuted will get called even if there was an exception and quartz is nice enough to provide you with the exception object.</p>\n\n<p>As mentioned we use the data gathered to make sure our worker role is in good health. There are various other methods on these interfaces so have a look at the linked documentation.  </p>\n\n<hr />\n\n<p><em>This post was first published on <a href=\"http://blog.entelect.co.za/home\">blog.entelect.co.za</a></em></p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420631084789,"created_by":1,"updated_at":1425533320886,"updated_by":1,"published_at":1425474108192,"published_by":1},{"id":7,"uuid":"26e5bb83-0945-49a1-a778-eb4e9de804b3","title":"Git Good","slug":"git-good","markdown":"Git has clearly won the source control wars. Its lightweight branching and easy merging make for a frictionless experience. But there are things that you as developer can do with git and with your code to make it even better.\n\n**Small Files**\n\nHaving files and functions that contain as few lines of code as possible is more a Clean Code principle than a *Be Good At Source Control* principle, however it effects your source control directly. The Single Responsibility Principle will help you enforce just that. But how can this possibly effect source control? \n\n* Small Files. It's easier to solve a merge conflict in a small file than in a 800 line monster.\n* Small Functions. If you have smaller functions, the chances of having conflicts lessen and if you have conflicts the intent of the code should be clear and you will be able to easily solve the conflict.\n* One Thing. If your classes does one thing and one thing only and only that one thing, you will find that you don't often have many hands in that code at the same time.\n\n**Small Frequent Well Named Commits**\n\nCommit small units of functionality and name these commits well. This will help you easily see what changes you made when you worked on a specific piece of code. This will also help you find bugs that where introduced in a series of commits. You won't find yourself in the situation where you need to revert a bunch of code, and in the process lose code that you have already completed. \n\nIf you find that a piece of code that you are working on is just to big too fit into a small commit, or you are not comfortable with a small commit, then make a branch.\n\n**Make Branches**\n\nNot making branches is a taboo that should die away with the likes of sourcesafe and svn. In git branching is easy and cheap and local. You are encouraged to make many branches for the following reasons\n\n* You don't dirty your working code with un-tested code.\n* Have something you want to try? Make a branch. If it does not work just delete it and forget about it without any impact to existing code.\n* Working on a big feature and suddenly have to change an unrelated thing? Both of those had to be their own branches so you could handle them separately.\n\n**Squash Commits**\n\nSometimes I make a branch to try something new or to update libraries or something. These branches usually contain many breaking commits that I do not want to litter the history with. I deal with this problem using the `--squash` command when merging my branch.\n\n\n<pre><code class=\"language-bash\">git merge someBranch --squash</code></pre>\n\nThis will merge the branch but not commit the changes. I then commit the changes with a commit message of choice and delete the branch. Thus the changes appears in my history as a single change. I know this might seem in conflict with Small Frequent Well Named Commits, but there are cases where this is fine (like adding a bunch of new code that is separated from existing code).\n\nThere will always be some cases where the above \"rules\" are not applicable or not possible to enforce, but I find that they are a good guideline for myself.\n\nPlease feel free to add to the list in the comments\n___\n*This post was first published on [blog.entelect.co.za](http://blog.entelect.co.za/home)*\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>Git has clearly won the source control wars. Its lightweight branching and easy merging make for a frictionless experience. But there are things that you as developer can do with git and with your code to make it even better.</p>\n\n<p><strong>Small Files</strong></p>\n\n<p>Having files and functions that contain as few lines of code as possible is more a Clean Code principle than a <em>Be Good At Source Control</em> principle, however it effects your source control directly. The Single Responsibility Principle will help you enforce just that. But how can this possibly effect source control? </p>\n\n<ul>\n<li>Small Files. It's easier to solve a merge conflict in a small file than in a 800 line monster.</li>\n<li>Small Functions. If you have smaller functions, the chances of having conflicts lessen and if you have conflicts the intent of the code should be clear and you will be able to easily solve the conflict.</li>\n<li>One Thing. If your classes does one thing and one thing only and only that one thing, you will find that you don't often have many hands in that code at the same time.</li>\n</ul>\n\n<p><strong>Small Frequent Well Named Commits</strong></p>\n\n<p>Commit small units of functionality and name these commits well. This will help you easily see what changes you made when you worked on a specific piece of code. This will also help you find bugs that where introduced in a series of commits. You won't find yourself in the situation where you need to revert a bunch of code, and in the process lose code that you have already completed. </p>\n\n<p>If you find that a piece of code that you are working on is just to big too fit into a small commit, or you are not comfortable with a small commit, then make a branch.</p>\n\n<p><strong>Make Branches</strong></p>\n\n<p>Not making branches is a taboo that should die away with the likes of sourcesafe and svn. In git branching is easy and cheap and local. You are encouraged to make many branches for the following reasons</p>\n\n<ul>\n<li>You don't dirty your working code with un-tested code.</li>\n<li>Have something you want to try? Make a branch. If it does not work just delete it and forget about it without any impact to existing code.</li>\n<li>Working on a big feature and suddenly have to change an unrelated thing? Both of those had to be their own branches so you could handle them separately.</li>\n</ul>\n\n<p><strong>Squash Commits</strong></p>\n\n<p>Sometimes I make a branch to try something new or to update libraries or something. These branches usually contain many breaking commits that I do not want to litter the history with. I deal with this problem using the <code>--squash</code> command when merging my branch.</p>\n\n<pre><code class=\"language-bash\">git merge someBranch --squash</code></pre>\n\n<p>This will merge the branch but not commit the changes. I then commit the changes with a commit message of choice and delete the branch. Thus the changes appears in my history as a single change. I know this might seem in conflict with Small Frequent Well Named Commits, but there are cases where this is fine (like adding a bunch of new code that is separated from existing code).</p>\n\n<p>There will always be some cases where the above \"rules\" are not applicable or not possible to enforce, but I find that they are a good guideline for myself.</p>\n\n<p>Please feel free to add to the list in the comments  </p>\n\n<hr />\n\n<p><em>This post was first published on <a href=\"http://blog.entelect.co.za/home\">blog.entelect.co.za</a></em></p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1420633118125,"created_by":1,"updated_at":1421487846897,"updated_by":1,"published_at":1420633365340,"published_by":1},{"id":9,"uuid":"fd8b3fe3-2f8b-4e92-981b-998075fd8de8","title":"SignalR Hello World (That is not a chat app)","slug":"signalr-hello-world","markdown":"I have been wanting to try out SignalR for a while now and finally came up with an idea that is simple enough to start with (that is not a chat application).\n\nI am not going to go into the details of how SignalR works, just show you the code to get started. If you have never heard about SignalR, read the first two paragraphs [here](http://signalr.net/).\n\nOur app will do the following\n\n* The User navigates to a page on their desktop. We will display a QR code on the page\n* The User will scan the QR code with their smart phone and get redirected to a page on their mobile browser\n* The User will then see live orientation data of their phone on their desktop\n\nTo keep the post short I am only going to show you the code relevant to SignalR. You can checkout the [demo](http://sneakysignal.azurewebsites.net/) and the [source code](https://github.com/SneakyPeet/SneakySignal) for the full details.\n\n**Let's Get Started**\n\nOpen up Visual Studio and create a new *ASP.NET MVC 5* application.\n\nGrab the following library via nuget\n\n* Microsoft ASP.NET Web SignalR\n\n**On The Server**\n\nThe first thing we need to do is hook-up SignalR to our app start-up. We do this by creating a file and adding the following code. When the app starts up the Configuration function will automatically get called. **Note: SneakySignal is the name of the project and has nothing to do with SignalR.* \n\n<pre><code class=\"csharp\">using Microsoft.Owin;\nusing Owin;\n[assembly: OwinStartup(typeof(SneakySignal.Startup))]\nnamespace SneakySignal\n{\n    public class Startup\n    {\n        public void Configuration(IAppBuilder app)\n        {\n            app.MapSignalR();\n        }\n    }\n}</code></pre>\n\nNext we need to add the code that will handle the communication between server and client. For now all you need to know is that SignalR uses the concept of hubs. You can read more about it [here](http://www.asp.net/signalr/overview/guide-to-the-api). \n\nCreate the MotionHub.cs class that inherits from Hub. \n\n<pre><code class=\"csharp\">using Microsoft.AspNet.SignalR;\nnamespace SneakySignal\n{\n    public class MotionHub : Hub\n    {\n        //Desktop and phone uses this to get their connection id\n        public string GetConnectionId()\n        {\n            return Context.ConnectionId;\n        }\n\t\t\n        //Called by the phone\n        //Tells the desktop that the phone wants to connect\n        public void ClientConnected(string connectionId)\n        {\n            var clientId = Context.ConnectionId;\n            Clients.Client(connectionId).clientConnected(clientId);\n        }\n        \n        //Called by the desktop\n        //Tells the phone that it is connected and can start sending data\n        public void StartExecution(string connectionId)\n        {\n            Clients.Client(connectionId).startExecution();\n        }\n        \n        //Called by the phone\n        //Tells the desktop that the orientation has changed\n        public void OrientationChanged(string connectionId, OrientationData orientationData)\n        {\n            Clients.Client(connectionId).orientationChanged(orientationData);\n        }\n    }\n  \n    public class OrientationData\n\t{\n    \tpublic decimal Alpha { get; set; }\n    \tpublic decimal Beta { get; set; }\n    \tpublic decimal Gamma { get; set; }\n\t}\n}</code></pre>\n\nAs you can see we only have to write the business logic specific to our app as SignalR handles all the connection management.\n\nLast but not least add the following lines in your `_layout.cshtml` file.\n\n<pre><code class=\"language-bash\">/Scripts/jquery.signalR-2.1.2.min.js\n/signalr/js</code></pre>\n\n`/signalr/js` is a convention used by SignalR. On build our MobileHub will generate some javascript that will be found on this route.\n\nNow for the client side implementations.\n\n**Desktop Client**\n<pre><code class=\"language-javascript\">var hub = $.connection.motionHub;\n//register mobile and tell it to start executing\nhub.client.ClientConnected = function (clientId) {\n\thub.server.startExecution(clientConnectionId);\n};\n//update orientation\nhub.client.orientationChanged = function (orientation) {\n        \n};\n\n//connect to server\n$.connection.hub.start().done(function () {\n\thub.server.getConnectionId().done(function (desktopConnectionId) {\n\t\t//show QR code with url containing desktop connection id\n\t});\n})</code></pre>\n\nThe first thing you will see is that we get our specific hub from `$.connection.motionHub`. We then subscribe to the clientConnected and orientationChanged methods that we specified in our `MotionHub.cs` file. \n\nThe last thing is to connect to the server using $`.connection.hub.start()`. When we are connected to the server we ask it to provide us with our connection id.\n\n**Mobile Client**\n<pre><code class=\"language-javascript\">var hub = $.connection.motionHub;\n\nhub.client.StartExecution = function () {\n  window.addEventListener(\"deviceorientation\", function(orientation){\n  \t  hub.server.orientationChanged(desktopConnectionId, orientation);\n  });\n};\n//connect to server\n$.connection.hub.start().done(function () {\n\thub.server.clientConnected(desktopConnectionId).done();\n});</code></pre>\n\nThe javascript on the mobile side is very similar. First we subscribe to `startExecution`. In this method we add an event listener that listens for the `deviceorientation` event. On an event we call `orientationChanged` on the server with the new orientation.\n\nAll that is left is to connect to the server and tell the relevant desktop that we want to connect to it.\n\n**note. I left out a lot of logic like event throttling etc. to keep it concise.*\n\nTo summarize what is actually happening have a look at the image below.\n\n![SignalR hello world program flow](https://farm8.staticflickr.com/7545/16034625040_89802f3c7c_o.png)\n\n**And thats it**\n\nI was impressed by how simple it is to get something awesome done so easily. Obviously there is a lot more to SignalR and what you can do with it, but for a hello world this really turned out great. Jump over to the [demo](http://sneakysignal.azurewebsites.net/) and have a look.\n___\n*This post was first published on [blog.entelect.co.za](http://blog.entelect.co.za/home)*\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>I have been wanting to try out SignalR for a while now and finally came up with an idea that is simple enough to start with (that is not a chat application).</p>\n\n<p>I am not going to go into the details of how SignalR works, just show you the code to get started. If you have never heard about SignalR, read the first two paragraphs <a href=\"http://signalr.net/\">here</a>.</p>\n\n<p>Our app will do the following</p>\n\n<ul>\n<li>The User navigates to a page on their desktop. We will display a QR code on the page</li>\n<li>The User will scan the QR code with their smart phone and get redirected to a page on their mobile browser</li>\n<li>The User will then see live orientation data of their phone on their desktop</li>\n</ul>\n\n<p>To keep the post short I am only going to show you the code relevant to SignalR. You can checkout the <a href=\"http://sneakysignal.azurewebsites.net/\">demo</a> and the <a href=\"https://github.com/SneakyPeet/SneakySignal\">source code</a> for the full details.</p>\n\n<p><strong>Let's Get Started</strong></p>\n\n<p>Open up Visual Studio and create a new <em>ASP.NET MVC 5</em> application.</p>\n\n<p>Grab the following library via nuget</p>\n\n<ul>\n<li>Microsoft ASP.NET Web SignalR</li>\n</ul>\n\n<p><strong>On The Server</strong></p>\n\n<p>The first thing we need to do is hook-up SignalR to our app start-up. We do this by creating a file and adding the following code. When the app starts up the Configuration function will automatically get called. <em>*Note: SneakySignal is the name of the project and has nothing to do with SignalR.</em> </p>\n\n<pre><code class=\"csharp\">using Microsoft.Owin;\nusing Owin;\n[assembly: OwinStartup(typeof(SneakySignal.Startup))]\nnamespace SneakySignal\n{\n    public class Startup\n    {\n        public void Configuration(IAppBuilder app)\n        {\n            app.MapSignalR();\n        }\n    }\n}</code></pre>\n\n<p>Next we need to add the code that will handle the communication between server and client. For now all you need to know is that SignalR uses the concept of hubs. You can read more about it <a href=\"http://www.asp.net/signalr/overview/guide-to-the-api\">here</a>. </p>\n\n<p>Create the MotionHub.cs class that inherits from Hub. </p>\n\n<pre><code class=\"csharp\">using Microsoft.AspNet.SignalR;\nnamespace SneakySignal\n{\n    public class MotionHub : Hub\n    {\n        //Desktop and phone uses this to get their connection id\n        public string GetConnectionId()\n        {\n            return Context.ConnectionId;\n        }\n\n        //Called by the phone\n        //Tells the desktop that the phone wants to connect\n        public void ClientConnected(string connectionId)\n        {\n            var clientId = Context.ConnectionId;\n            Clients.Client(connectionId).clientConnected(clientId);\n        }\n\n        //Called by the desktop\n        //Tells the phone that it is connected and can start sending data\n        public void StartExecution(string connectionId)\n        {\n            Clients.Client(connectionId).startExecution();\n        }\n\n        //Called by the phone\n        //Tells the desktop that the orientation has changed\n        public void OrientationChanged(string connectionId, OrientationData orientationData)\n        {\n            Clients.Client(connectionId).orientationChanged(orientationData);\n        }\n    }\n\n    public class OrientationData\n    {\n        public decimal Alpha { get; set; }\n        public decimal Beta { get; set; }\n        public decimal Gamma { get; set; }\n    }\n}</code></pre>\n\n<p>As you can see we only have to write the business logic specific to our app as SignalR handles all the connection management.</p>\n\n<p>Last but not least add the following lines in your <code>_layout.cshtml</code> file.</p>\n\n<pre><code class=\"language-bash\">/Scripts/jquery.signalR-2.1.2.min.js\n/signalr/js</code></pre>\n\n<p><code>/signalr/js</code> is a convention used by SignalR. On build our MobileHub will generate some javascript that will be found on this route.</p>\n\n<p>Now for the client side implementations.</p>\n\n<p><strong>Desktop Client</strong></p>\n\n<pre><code class=\"language-javascript\">var hub = $.connection.motionHub;\n//register mobile and tell it to start executing\nhub.client.ClientConnected = function (clientId) {\n    hub.server.startExecution(clientConnectionId);\n};\n//update orientation\nhub.client.orientationChanged = function (orientation) {\n\n};\n\n//connect to server\n$.connection.hub.start().done(function () {\n    hub.server.getConnectionId().done(function (desktopConnectionId) {\n        //show QR code with url containing desktop connection id\n    });\n})</code></pre>\n\n<p>The first thing you will see is that we get our specific hub from <code>$.connection.motionHub</code>. We then subscribe to the clientConnected and orientationChanged methods that we specified in our <code>MotionHub.cs</code> file. </p>\n\n<p>The last thing is to connect to the server using $<code>.connection.hub.start()</code>. When we are connected to the server we ask it to provide us with our connection id.</p>\n\n<p><strong>Mobile Client</strong></p>\n\n<pre><code class=\"language-javascript\">var hub = $.connection.motionHub;\n\nhub.client.StartExecution = function () {\n  window.addEventListener(\"deviceorientation\", function(orientation){\n        hub.server.orientationChanged(desktopConnectionId, orientation);\n  });\n};\n//connect to server\n$.connection.hub.start().done(function () {\n    hub.server.clientConnected(desktopConnectionId).done();\n});</code></pre>\n\n<p>The javascript on the mobile side is very similar. First we subscribe to <code>startExecution</code>. In this method we add an event listener that listens for the <code>deviceorientation</code> event. On an event we call <code>orientationChanged</code> on the server with the new orientation.</p>\n\n<p>All that is left is to connect to the server and tell the relevant desktop that we want to connect to it.</p>\n\n<p><em>*note. I left out a lot of logic like event throttling etc. to keep it concise.</em></p>\n\n<p>To summarize what is actually happening have a look at the image below.</p>\n\n<p><img src=\"https://farm8.staticflickr.com/7545/16034625040_89802f3c7c_o.png\" alt=\"SignalR hello world program flow\" /></p>\n\n<p><strong>And thats it</strong></p>\n\n<p>I was impressed by how simple it is to get something awesome done so easily. Obviously there is a lot more to SignalR and what you can do with it, but for a hello world this really turned out great. Jump over to the <a href=\"http://sneakysignal.azurewebsites.net/\">demo</a> and have a look.  </p>\n\n<hr />\n\n<p><em>This post was first published on <a href=\"http://blog.entelect.co.za/home\">blog.entelect.co.za</a></em></p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"SignalR Hello World That is Not A Chat App","meta_description":null,"author_id":1,"created_at":1420633828872,"created_by":1,"updated_at":1421487863674,"updated_by":1,"published_at":1420635121410,"published_by":1},{"id":10,"uuid":"3dec206f-608e-442e-b4d1-ceb29e9c518d","title":"Introduction To Practical Domain Driven Design","slug":"intro-to-practical-domain-driven-design","markdown":"**Domain Driven Design** (DDD) is a very theoretical field ([Go Read The Big Blue Book](http://www.amazon.com/exec/obidos/ASIN/0321125215/domainlanguag-20)). Even though all the concepts of DDD (like entities and repositories) are easily implemented, few examples of these exist under the DDD banner. The reason for this is that the focus of DDD is just that, it highlights the Domain. Domain driven design differentiates itself from concepts like MVC and SOA, by not providing a blue print for how code will be structured. Instead it focusses primarily on the problem domain. A well implemented DDD application will highlight domain and not architecture. \n\n>But what do you mean? Am I not building an MVC application? \n\nTake a look at the two folder structures below. \n<div style=\"text-align: center;\"><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1421694756/FolderStructure_e6qhri.png\" alt=\"Architecture vs. Domain file structures\" style=\"max-width: 400px; margin-bottom:1em\"/></div>\n\n[Uncle Bob Martin](https://twitter.com/unclebobmartin) would say the one on the left screams `Model View Controller` and the one on the right `Business Administration`. The one on the right is what DDD tries to get at. **The business becomes the core of the application.** This helps us solve difficult business problems without the \"noise\" of software engineering patterns and practices. This domain will ultimately share the same language that the experts in the field use, thus improving communication between developer and business, and ultimately giving you a happy customer.\n\nAnother great side effect is that your concerns are clearly separated. **The core of the application will have no clue about persistence or UI.** This frees us up to clearly define the functionality of the app, and leaves the technology decisions for later. \n\n> So I can prevent scenarios where an app is built on a relational database just to realize later that a document store would have been more appropriate!\n\nThis is a usually a total mind shift for developers as the first thing we think about is the database.\nNo longer will we be saying:\" *This app should be a SPA with a web api backend, EntityFramework as ORM and SQL server as data store*.\" You would rather say:\" *This will be a scheduling app that helps the business manage employee time, thus increasing productivity and ultimately maximising profit*\".\n\n> But we have already decided that we will use MySQL as this is company policy.\n\nThis is also fine. Your domain does not care about the tech. The great thing about this separation of concerns is that DDD lends itself to testing. There are very well defined seams in your application and because your domain is isolated at the center of the app **there is no reason not to have 100% code coverage** of your business rules.\n\n###So in conclusion \nDomain Driven Design provides us with `Clear`, `Maintainable` and `Testable` code that speaks the `language` of the business.\n\n>But Pieter, all this is just theory and good ideas, but how do I actually make this happen?\n\nFor the next few weeks I will be taking the above theory and putting it to practice. I will be showing you how to make your applications scream domain, but I will also show you the practical side, the software side :) I will be using .net and c#, but there will be no reason why you will not be able to take these principles to other technologies.\n\nLet us learn together and be awesome!\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p><strong>Domain Driven Design</strong> (DDD) is a very theoretical field (<a href=\"http://www.amazon.com/exec/obidos/ASIN/0321125215/domainlanguag-20\">Go Read The Big Blue Book</a>). Even though all the concepts of DDD (like entities and repositories) are easily implemented, few examples of these exist under the DDD banner. The reason for this is that the focus of DDD is just that, it highlights the Domain. Domain driven design differentiates itself from concepts like MVC and SOA, by not providing a blue print for how code will be structured. Instead it focusses primarily on the problem domain. A well implemented DDD application will highlight domain and not architecture. </p>\n\n<blockquote>\n  <p>But what do you mean? Am I not building an MVC application? </p>\n</blockquote>\n\n<p>Take a look at the two folder structures below.  </p>\n\n<div style=\"text-align: center;\"><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1421694756/FolderStructure_e6qhri.png\" alt=\"Architecture vs. Domain file structures\" style=\"max-width: 400px; margin-bottom:1em\"/></div>\n\n<p><a href=\"https://twitter.com/unclebobmartin\">Uncle Bob Martin</a> would say the one on the left screams <code>Model View Controller</code> and the one on the right <code>Business Administration</code>. The one on the right is what DDD tries to get at. <strong>The business becomes the core of the application.</strong> This helps us solve difficult business problems without the \"noise\" of software engineering patterns and practices. This domain will ultimately share the same language that the experts in the field use, thus improving communication between developer and business, and ultimately giving you a happy customer.</p>\n\n<p>Another great side effect is that your concerns are clearly separated. <strong>The core of the application will have no clue about persistence or UI.</strong> This frees us up to clearly define the functionality of the app, and leaves the technology decisions for later. </p>\n\n<blockquote>\n  <p>So I can prevent scenarios where an app is built on a relational database just to realize later that a document store would have been more appropriate!</p>\n</blockquote>\n\n<p>This is a usually a total mind shift for developers as the first thing we think about is the database. <br />\nNo longer will we be saying:\" <em>This app should be a SPA with a web api backend, EntityFramework as ORM and SQL server as data store</em>.\" You would rather say:\" <em>This will be a scheduling app that helps the business manage employee time, thus increasing productivity and ultimately maximising profit</em>\".</p>\n\n<blockquote>\n  <p>But we have already decided that we will use MySQL as this is company policy.</p>\n</blockquote>\n\n<p>This is also fine. Your domain does not care about the tech. The great thing about this separation of concerns is that DDD lends itself to testing. There are very well defined seams in your application and because your domain is isolated at the center of the app <strong>there is no reason not to have 100% code coverage</strong> of your business rules.</p>\n\n<h3 id=\"soinconclusion\">So in conclusion</h3>\n\n<p>Domain Driven Design provides us with <code>Clear</code>, <code>Maintainable</code> and <code>Testable</code> code that speaks the <code>language</code> of the business.</p>\n\n<blockquote>\n  <p>But Pieter, all this is just theory and good ideas, but how do I actually make this happen?</p>\n</blockquote>\n\n<p>For the next few weeks I will be taking the above theory and putting it to practice. I will be showing you how to make your applications scream domain, but I will also show you the practical side, the software side :) I will be using .net and c#, but there will be no reason why you will not be able to take these principles to other technologies.</p>\n\n<p>Let us learn together and be awesome!</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"Introduction To Practical Domain Driven Design","meta_description":"Domain Driven Design is a very theoretical field because the focus of Domain Driven Design is to highlight the domain, not the architecture. ","author_id":1,"created_at":1421558600061,"created_by":1,"updated_at":1421747499935,"updated_by":1,"published_at":1421695069125,"published_by":1},{"id":11,"uuid":"80060357-2bf0-48cf-81c2-dc0d33d65fa0","title":"Go For Launch","slug":"go-for-launch","markdown":"I love to learn. When I learn something awesome I have a compulsive need to share it with people around me that might benefit. As part of building my teaching brand I co-started a Clean Code forum at my company and also made regular posts on the [company's technical blog](http://blog.entelect.co.za/home). Although this helped establish my brand at the company, I realized that if I left, I would have to leave most of the brand behind.\n\nI was playing around with the idea of writing a blog for a while as a place to keep how-to's for myself. My friend [Pierre de Plessis](http://www.pierreduplessis.co.za/) happened to share the book [Show Your Work](http://austinkleon.com/show-your-work/) and after reading it there was no more holding back. The time for waiting and doubt was over.\n\nSo without knowing too much I rolled out SneakyCode. The day after it went live, [John Sonmez](http://simpleprogrammer.com/) tweeted about a [free blogging course](http://devcareerboost.com/blog-course/). This is well timed, I thought. Little did I know that John would help me focus and commit to building SneakyCode as an essential part of my brand. And he was doing it for free, engaging with me via email and helping me overcome uncertainty. \n\n**+1 for awesomeness John!**\n\nI have high hopes for this blog. It will drive me to learn more, to share what I have learned and to hopefully open doors that normally would have seem entirely out of reach.\n\nGO GO GO","html":"<p>I love to learn. When I learn something awesome I have a compulsive need to share it with people around me that might benefit. As part of building my teaching brand I co-started a Clean Code forum at my company and also made regular posts on the <a href=\"http://blog.entelect.co.za/home\">company's technical blog</a>. Although this helped establish my brand at the company, I realized that if I left, I would have to leave most of the brand behind.</p>\n\n<p>I was playing around with the idea of writing a blog for a while as a place to keep how-to's for myself. My friend <a href=\"http://www.pierreduplessis.co.za/\">Pierre de Plessis</a> happened to share the book <a href=\"http://austinkleon.com/show-your-work/\">Show Your Work</a> and after reading it there was no more holding back. The time for waiting and doubt was over.</p>\n\n<p>So without knowing too much I rolled out SneakyCode. The day after it went live, <a href=\"http://simpleprogrammer.com/\">John Sonmez</a> tweeted about a <a href=\"http://devcareerboost.com/blog-course/\">free blogging course</a>. This is well timed, I thought. Little did I know that John would help me focus and commit to building SneakyCode as an essential part of my brand. And he was doing it for free, engaging with me via email and helping me overcome uncertainty. </p>\n\n<p><strong>+1 for awesomeness John!</strong></p>\n\n<p>I have high hopes for this blog. It will drive me to learn more, to share what I have learned and to hopefully open doors that normally would have seem entirely out of reach.</p>\n\n<p>GO GO GO</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1422032776024,"created_by":1,"updated_at":1422036874425,"updated_by":1,"published_at":1422036734601,"published_by":1},{"id":12,"uuid":"b9dfcc79-8385-4a5f-a24e-a53f3d21bd78","title":"Domain Driven Design App Structure","slug":"domain-driven-design-app-structure","markdown":"At the center of our DDD universe lies the **Domain**. It is the beating heart of our application. The life of our application flows out of the domain like blood through the body. **DRAMA!** What I am trying to get at is that the domain is really important. I mean it is right there in the name: *Domain* Driven Design. It is the place where we model our real life problem. We share this domain with the experts in the field. We use the same concepts and language that they use and we continuously engage with these experts so our model can evolve and grow as our project grows. \n\n**Important things to remember about the Domain** \n\n* The Domain knows only about itself. It does not depend on the other parts of the application. It is the center of the metaphorical onion.\n* It is where our rules live.\n* We are not afraid to refactor the domain model, and change it to fit the real life domain more closely.\n* The domain provides interfaces to define persistence and integration, but it does not implement these interfaces. It knows **nothing** about how it is persisted, displayed or who uses it. \n* Test coverage for the domain should be very high if not 100%. It lends itself well to TDD and because of its isolation, change is easy.\n\nBut the domain does not stand alone. \n\n**Persistence**\n\nOh look, a database! As stated previously the domain will provide the persistence interface, but the persistence layer will be responsible for the implementation. The domain does not care if its data is stored in MySQL, MongoDB, Text Files or just sent into the ether. The repository pattern lends itself well to DDD and to change how we persist should theoretically be as easy as replacing a DLL. Not so trivial in practice though, but we will get to that.\n\n**Integration**\n\nThis is where the application talks to the outside world. We call web services and send emails from the integration layer.\n\n**Application**\n\nThe application layer is like a giant blanket covering the domain, persistence and integration layers. It is where our use cases live. It orchestrates the interactions between persistence, integration, users and the domain. Anyone who wants to use the application will do so through the application layer. They will know nothing about the domain, persistence or integration. How does this look in the real world? Say I have an MVC Web App. Our Application will take the role of the Model. \n\nTo visualise what I am trying to say I made a little gif (or *jif* for the hipsters)\n\n![Overview of a Domain Driven Design Application](http://res.cloudinary.com/dltpyggxx/image/upload/v1422105983/output_FuKgD4_es43ww.gif)\n\nSo there you have it. My work here is done... \n\nNo no no not really! We still need to talk about how to practically do all of the above. But for now I am tired of typing :) See you soon!\n\n___\nPart two of this post can be found [here](http://sneakycode.net/domain-driven-design-app-structure-part-2/).\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>At the center of our DDD universe lies the <strong>Domain</strong>. It is the beating heart of our application. The life of our application flows out of the domain like blood through the body. <strong>DRAMA!</strong> What I am trying to get at is that the domain is really important. I mean it is right there in the name: <em>Domain</em> Driven Design. It is the place where we model our real life problem. We share this domain with the experts in the field. We use the same concepts and language that they use and we continuously engage with these experts so our model can evolve and grow as our project grows. </p>\n\n<p><strong>Important things to remember about the Domain</strong> </p>\n\n<ul>\n<li>The Domain knows only about itself. It does not depend on the other parts of the application. It is the center of the metaphorical onion.</li>\n<li>It is where our rules live.</li>\n<li>We are not afraid to refactor the domain model, and change it to fit the real life domain more closely.</li>\n<li>The domain provides interfaces to define persistence and integration, but it does not implement these interfaces. It knows <strong>nothing</strong> about how it is persisted, displayed or who uses it. </li>\n<li>Test coverage for the domain should be very high if not 100%. It lends itself well to TDD and because of its isolation, change is easy.</li>\n</ul>\n\n<p>But the domain does not stand alone. </p>\n\n<p><strong>Persistence</strong></p>\n\n<p>Oh look, a database! As stated previously the domain will provide the persistence interface, but the persistence layer will be responsible for the implementation. The domain does not care if its data is stored in MySQL, MongoDB, Text Files or just sent into the ether. The repository pattern lends itself well to DDD and to change how we persist should theoretically be as easy as replacing a DLL. Not so trivial in practice though, but we will get to that.</p>\n\n<p><strong>Integration</strong></p>\n\n<p>This is where the application talks to the outside world. We call web services and send emails from the integration layer.</p>\n\n<p><strong>Application</strong></p>\n\n<p>The application layer is like a giant blanket covering the domain, persistence and integration layers. It is where our use cases live. It orchestrates the interactions between persistence, integration, users and the domain. Anyone who wants to use the application will do so through the application layer. They will know nothing about the domain, persistence or integration. How does this look in the real world? Say I have an MVC Web App. Our Application will take the role of the Model. </p>\n\n<p>To visualise what I am trying to say I made a little gif (or <em>jif</em> for the hipsters)</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1422105983/output_FuKgD4_es43ww.gif\" alt=\"Overview of a Domain Driven Design Application\" /></p>\n\n<p>So there you have it. My work here is done... </p>\n\n<p>No no no not really! We still need to talk about how to practically do all of the above. But for now I am tired of typing :) See you soon!</p>\n\n<hr />\n\n<p>Part two of this post can be found <a href=\"http://sneakycode.net/domain-driven-design-app-structure-part-2/\">here</a>.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"How Does A Domain Driven Design App Look","meta_description":null,"author_id":1,"created_at":1422101776405,"created_by":1,"updated_at":1422383433039,"updated_by":1,"published_at":1422107575433,"published_by":1},{"id":13,"uuid":"6722d79a-864f-452b-8dc3-e8ecec73c4f8","title":"Domain Driven Design App Structure part 2","slug":"domain-driven-design-app-structure-part-2","markdown":"In my [previous post](http://sneakycode.net/domain-driven-design-app-structure/), I gave an overview of what an implementation of a Domain Driven Design Application might look like.\n\nI will be running a C# project in parallel with my Practical Domain Driven Design Articles. The plan is to eventually provide a full project template that can be used either as a DDD reference project or as a starting point for a new application. You can find the **SimpleDDD** project on [GitHub](https://github.com/SneakyPeet/SimpleDDD/blob/master/README.md).\n___\n**Kicking off SimpleDDD**\n\nIf you have not read my **[previous post](http://sneakycode.net/domain-driven-design-app-structure/)** go do that first as this will give you some context.\n\nOpening the project you will find an application folder with 4 projects inside. I have named these projects a bit different than in my previous post. Exact names for these layers are not important, they should just be named clearly.\n\n**SimpleDDD.Domain**\n\n* This is our Domain/Model layer\n* It can also be called Core if you like\n* It depends on no other projects in our solution\n\n**SimpleDDD.Data**\n\n* This is our Persistence Layer\n* This layer will probably get renamed later to indicate the technology used. For example *SimpleDDD.Data.EntityFramework*\n* It depends on SimpleDDD.Domain\n\n**SimpleDDD.Integration**\n\n* Our integration layer (duh)\n* Depends on SimpleDDD.Domain\n\n**SimpleDDD.Api**\n\n* This is our Application layer\n* I have gone back and forth a few times on what this should be called. It is fine to call it Application or App or even AppBoundary. If you have a really big system it can even be named after your Bounded Context. I find that Api provides a nice naming convention. I prefer something like UserApi over UserApplicationService.\n* It depends on all three other projects\n* It is the project that will get used by consumers\n\nYou will see that I have not added any consuming projects like a console app. We will do so later on when we talk about boundaries, DI and object lifetimes.\n\nI have also cleared out all unused references added by visual studio. This might seem a bit redundant but we want to maintain a clean, fast compiling solution, thus we will stick to good principles from the start.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>In my <a href=\"http://sneakycode.net/domain-driven-design-app-structure/\">previous post</a>, I gave an overview of what an implementation of a Domain Driven Design Application might look like.</p>\n\n<p>I will be running a C# project in parallel with my Practical Domain Driven Design Articles. The plan is to eventually provide a full project template that can be used either as a DDD reference project or as a starting point for a new application. You can find the <strong>SimpleDDD</strong> project on <a href=\"https://github.com/SneakyPeet/SimpleDDD/blob/master/README.md\">GitHub</a>.  </p>\n\n<hr />\n\n<p><strong>Kicking off SimpleDDD</strong></p>\n\n<p>If you have not read my <strong><a href=\"http://sneakycode.net/domain-driven-design-app-structure/\">previous post</a></strong> go do that first as this will give you some context.</p>\n\n<p>Opening the project you will find an application folder with 4 projects inside. I have named these projects a bit different than in my previous post. Exact names for these layers are not important, they should just be named clearly.</p>\n\n<p><strong>SimpleDDD.Domain</strong></p>\n\n<ul>\n<li>This is our Domain/Model layer</li>\n<li>It can also be called Core if you like</li>\n<li>It depends on no other projects in our solution</li>\n</ul>\n\n<p><strong>SimpleDDD.Data</strong></p>\n\n<ul>\n<li>This is our Persistence Layer</li>\n<li>This layer will probably get renamed later to indicate the technology used. For example <em>SimpleDDD.Data.EntityFramework</em></li>\n<li>It depends on SimpleDDD.Domain</li>\n</ul>\n\n<p><strong>SimpleDDD.Integration</strong></p>\n\n<ul>\n<li>Our integration layer (duh)</li>\n<li>Depends on SimpleDDD.Domain</li>\n</ul>\n\n<p><strong>SimpleDDD.Api</strong></p>\n\n<ul>\n<li>This is our Application layer</li>\n<li>I have gone back and forth a few times on what this should be called. It is fine to call it Application or App or even AppBoundary. If you have a really big system it can even be named after your Bounded Context. I find that Api provides a nice naming convention. I prefer something like UserApi over UserApplicationService.</li>\n<li>It depends on all three other projects</li>\n<li>It is the project that will get used by consumers</li>\n</ul>\n\n<p>You will see that I have not added any consuming projects like a console app. We will do so later on when we talk about boundaries, DI and object lifetimes.</p>\n\n<p>I have also cleared out all unused references added by visual studio. This might seem a bit redundant but we want to maintain a clean, fast compiling solution, thus we will stick to good principles from the start.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1422289119479,"created_by":1,"updated_at":1422427516972,"updated_by":1,"published_at":1422383165914,"published_by":1},{"id":14,"uuid":"b646b5ae-7f72-4e32-8055-0187e15a417b","title":"Code Comments are Lies","slug":"code-comments-are-lies","markdown":"**Update**\n\nThis post generated some interesting comments on the [code project site](http://www.codeproject.com/script/Articles/ArticleVersion.aspx?waid=158130&aid=872073).\nHere are some things to note before you continue.\n\n* This post is aimed at higher level languages like C# and Java. Please comment your FORTRAN etc.\n* The best code that you can write is code that is maintainable as this is the true cost of software. If this requires you to add a comment please do that. I also do that.\n* A comment as an excuse for writing bad code, is unacceptable. \n\nPlease read the comments on code project. There are some valuable usecases there.\n___\nI'm going to make a bold statement. \n>YOUR COMMENTS ARE BAD AND YOU SHOULD FEEL BAD\n\n<div style=\"text-align: center;\"><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/c_scale,w_172/v1422551564/BadAss_t0fi7y.png\" alt=\"We got a Bad Ass here\" style=\"max-width: 200px; margin-bottom:1em\"/></div>\n*\"Oh no he didn't\"*. *\"My comments are informative and well written.\"* *\"How else would people understand this awesome piece of efficient code?\"*\n\nAlthough there are use cases for comments, I am going to tell you that comments are like little poops that you leave all over your code for you fellow devs to step in.\n\n**Let's look at some truths about comments**\n\n* They can state the obvious, thus being redundant.\n<pre><code class=\"csharp\">//The Persons First Name\npublic string FirstName { get; set;}</code></pre>\n\n* Having comments scattered throughout your code, explaining functionality in detail, makes it hard to read code fluently. This means that extra effort and concentration is needed to read between the comment lines. The intent does not jump out at you.\n\n>**Comments Become Lies**\n\n* Comments rarely get updated when the code changes. This means that overtime the functionality documented by the comments, drifts away from what is actually happening. This causes confusion and again makes the comments worthless.\n\n* ToDo Comments. They usually don't get done. \n\n* Comments get copied with code, and as the code changes again the comments don't. First of all you should think twice when you need to copy code, and if you have a great reason you have to make real sure to update (or even just remove) the comments made.\n\n* Finally, like Uncle Bob says in his book [Clean Code](http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882), if you need to write a comment you have failed to express the intent of the code. You want your code to read well, to be self-documenting so that you do not need to document it.\n\nI have written all these types of comments.\n\n>**I need to write a comment about my code, thus I have failed**\n\nThis is another bold statement. But it is exactly what I tell myself when I need to write a comment. It forces me to rethink my code and usually rewrite it to be more readable and maintainable. And if I still need to write the comment, it reminds me that I still have room for improvement. I can decide to leave out the comment and not feel bad, but I write it in hopes that it might aid me or whoever comes after me to understand my poorly expressed code.\n\n**So What Can I Do To Fix This Problem?**\n\nFirst of all, **Name Things Well**. Well named classes and functions and properties help eliminate confusion and clarifies code intent. A function should do what it says, a class be what it is named.\n\nFunctions should do one thing, it should do it well and it should do it only. Following the **Single Responsibility Principle** will eliminate most reasons to comment code.\n\nBut I hear you shouting from afar: *\"Pieter, not all comments can be bad\"*. This is true, although I still maintain comments are bad.\n\n**Some Good Comments**\n\n* Comments that you write to document badly written legacy code. It is not always possible to refactor code, so in these cases help yourself and others to document things that might have bad side effects. \n\n* Comments documenting framework limitations.\n<pre><code class=\"csharp\">public FooConstructor()\n{\n\t//EntityFramework requires a default constructor\n}</code></pre>\n\n* ToDo comments can be a great way to remind yourself of something that you need to do. Only use them while working on feature branches. They should be implemented or removed (placed on your backlog as a ticket) once you merge back to your main branch.\n\n* In the rare case that you need to write optimised code that might be confusing and not easily readable. This is a rare case for most of us.\n\n* API documenting code. In some languages you can add comments to classes, methods and properties and these will get rendered by your IDE or can be exported to actual documents. This should only live on public facing code and has no place inside your application where some random user will not use it.\n\nRemember you want to write readable, self-documenting, maintainable code for yourself and others. So stop writing that comment and be awesome instead.\n\nIf you can think of other examples please add them in the comments and if you liked this post share it with the hashtag `#badcomment`. For those of you that are still angry, [here are some funny comments.](http://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered)\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p><strong>Update</strong></p>\n\n<p>This post generated some interesting comments on the <a href=\"http://www.codeproject.com/script/Articles/ArticleVersion.aspx?waid=158130&amp;aid=872073\">code project site</a>. <br />\nHere are some things to note before you continue.</p>\n\n<ul>\n<li>This post is aimed at higher level languages like C# and Java. Please comment your FORTRAN etc.</li>\n<li>The best code that you can write is code that is maintainable as this is the true cost of software. If this requires you to add a comment please do that. I also do that.</li>\n<li>A comment as an excuse for writing bad code, is unacceptable. </li>\n</ul>\n\n<p>Please read the comments on code project. There are some valuable usecases there.  </p>\n\n<hr />\n\n<p>I'm going to make a bold statement.  </p>\n\n<blockquote>\n  <p>YOUR COMMENTS ARE BAD AND YOU SHOULD FEEL BAD</p>\n</blockquote>\n\n<div style=\"text-align: center;\"><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/c_scale,w_172/v1422551564/BadAss_t0fi7y.png\" alt=\"We got a Bad Ass here\" style=\"max-width: 200px; margin-bottom:1em\"/></div>  \n\n<p><em>\"Oh no he didn't\"</em>. <em>\"My comments are informative and well written.\"</em> <em>\"How else would people understand this awesome piece of efficient code?\"</em></p>\n\n<p>Although there are use cases for comments, I am going to tell you that comments are like little poops that you leave all over your code for you fellow devs to step in.</p>\n\n<p><strong>Let's look at some truths about comments</strong></p>\n\n<ul>\n<li>They can state the obvious, thus being redundant.</li>\n</ul>\n\n<pre><code class=\"csharp\">//The Persons First Name\npublic string FirstName { get; set;}</code></pre>\n\n<ul>\n<li>Having comments scattered throughout your code, explaining functionality in detail, makes it hard to read code fluently. This means that extra effort and concentration is needed to read between the comment lines. The intent does not jump out at you.</li>\n</ul>\n\n<blockquote>\n  <p><strong>Comments Become Lies</strong></p>\n</blockquote>\n\n<ul>\n<li><p>Comments rarely get updated when the code changes. This means that overtime the functionality documented by the comments, drifts away from what is actually happening. This causes confusion and again makes the comments worthless.</p></li>\n<li><p>ToDo Comments. They usually don't get done. </p></li>\n<li><p>Comments get copied with code, and as the code changes again the comments don't. First of all you should think twice when you need to copy code, and if you have a great reason you have to make real sure to update (or even just remove) the comments made.</p></li>\n<li><p>Finally, like Uncle Bob says in his book <a href=\"http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\">Clean Code</a>, if you need to write a comment you have failed to express the intent of the code. You want your code to read well, to be self-documenting so that you do not need to document it.</p></li>\n</ul>\n\n<p>I have written all these types of comments.</p>\n\n<blockquote>\n  <p><strong>I need to write a comment about my code, thus I have failed</strong></p>\n</blockquote>\n\n<p>This is another bold statement. But it is exactly what I tell myself when I need to write a comment. It forces me to rethink my code and usually rewrite it to be more readable and maintainable. And if I still need to write the comment, it reminds me that I still have room for improvement. I can decide to leave out the comment and not feel bad, but I write it in hopes that it might aid me or whoever comes after me to understand my poorly expressed code.</p>\n\n<p><strong>So What Can I Do To Fix This Problem?</strong></p>\n\n<p>First of all, <strong>Name Things Well</strong>. Well named classes and functions and properties help eliminate confusion and clarifies code intent. A function should do what it says, a class be what it is named.</p>\n\n<p>Functions should do one thing, it should do it well and it should do it only. Following the <strong>Single Responsibility Principle</strong> will eliminate most reasons to comment code.</p>\n\n<p>But I hear you shouting from afar: <em>\"Pieter, not all comments can be bad\"</em>. This is true, although I still maintain comments are bad.</p>\n\n<p><strong>Some Good Comments</strong></p>\n\n<ul>\n<li><p>Comments that you write to document badly written legacy code. It is not always possible to refactor code, so in these cases help yourself and others to document things that might have bad side effects. </p></li>\n<li><p>Comments documenting framework limitations.</p></li>\n</ul>\n\n<pre><code class=\"csharp\">public FooConstructor()\n{\n    //EntityFramework requires a default constructor\n}</code></pre>\n\n<ul>\n<li><p>ToDo comments can be a great way to remind yourself of something that you need to do. Only use them while working on feature branches. They should be implemented or removed (placed on your backlog as a ticket) once you merge back to your main branch.</p></li>\n<li><p>In the rare case that you need to write optimised code that might be confusing and not easily readable. This is a rare case for most of us.</p></li>\n<li><p>API documenting code. In some languages you can add comments to classes, methods and properties and these will get rendered by your IDE or can be exported to actual documents. This should only live on public facing code and has no place inside your application where some random user will not use it.</p></li>\n</ul>\n\n<p>Remember you want to write readable, self-documenting, maintainable code for yourself and others. So stop writing that comment and be awesome instead.</p>\n\n<p>If you can think of other examples please add them in the comments and if you liked this post share it with the hashtag <code>#badcomment</code>. For those of you that are still angry, <a href=\"http://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered\">here are some funny comments.</a></p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1422289135754,"created_by":1,"updated_at":1423027471762,"updated_by":1,"published_at":1422893150285,"published_by":1},{"id":15,"uuid":"0996aaf6-fe05-422b-a681-7b49aa7c3d65","title":"Entity is for Identity","slug":"entity-is-for-identity","markdown":"Continuing on our Domain Driven Design thread, we will talk about domain specific objects in the next few posts.\n\nWe start with the Entity. Entity is one of the three main base objects in our domain core. It is **not** to be confused with an entity in EntityFramework!\n\nIn most applications there will be some kind of persistence meaning there will be objects that outlive the lifetime of a usage session. We need to keep track of these objects between sessions and we need to be able to easily identify them. \n\n**What is identity?**\n\n* Identity is a property that is unique across all instances of an object\n\t* Two objects with the same attributes (i.e. they look the same), but with different identity, are not the same object\n* Identity is not determined by object attributes\n\t* Two objects with different attributes but the same identity, is the same object, although the state of the objects are different\n\nThose familiar with SQL will recognize that we usually have a primary key column, and that this is usually an integer generated by the database. As this is a perfect example of identity, it is not the only valid case.\n\n* As stated **Integers** (or an equivalent number type) are used.\n* **Strings** can also be used. A person's name is generally not a good identity as names are not unique. Types in a type table are usually unique and might be a use case. (I need to explore this more)\n* In some cases an application has to rely on itself to generate an identity and a **Guid** works great for this purpose.\n* **Value objects**. This can be an object that can be uniquely identified by its attributes. We will discuss value objects in a later post. \n\n**What is Entity?**\n\n* An Entity has Identity as stated above\n* An Entity is responsible for tracking it's state and the rules regulating it's lifecycle (from [DDD Reference](http://domainlanguage.com/ddd/reference/) )\n\nAn entity is the abstraction we use to model objects with identity.\n\n**How would this look?** `examples in c#`\n\nFirst of all, we will *label* all our objects with identity as an entity using an interface.\n\n```csharp \npublic interface IEntity\n{\n    int Id { get; }\n}\n```\n\nUsing it like this means that we will always use integers as identity and that we will compare entities using the Id property.\n\nWe can improve our entity by allowing different types as identity. \n```csharp\"\npublic interface IEntity<out TKey>\n{\n    TKey Id { get; }\n}\n```\n\nWhen comparing an identity that is complex, using `id == id` might not be enough. In these cases we will add a `IsSameAs` method to our interface. Using this method we can explicitly state how we want to compare identity.\n```csharp\npublic interface IComplexEntity<out TKey, in TEntity>\n{\n    TKey Id { get; }\n    bool IsSameAs(TEntity entity);\n}\n//Object Definition\npublic class User : IComplexEntity<int, User>\n```\n\nWe can even reuse `IEntity<TKey>` and only apply `IsSameAs` where needed.\n\n```csharp\npublic interface IComparableEntity<out TKey, in TEntity> : IEntity<TKey>\n\n//We can even use System.IComparable<>\npublic interface IEntityInheritingIComparable<out TKey, in TEntity> : IComparable<TEntity>\n```\n\nThe method you choose will highly depend on the problem you need to solve. The right way is the way that best fits your model and is agreed upon by your team.\n\n**Where does entity live?**\n\nEntity lives at the center of your domain layer. I like to place it in a folder called `abstractions` together with my other high level DDD concepts. I have also seen this namespace called 'shared' or 'core'. For those who really like separation you can move all your abstractions into its own project.\n\nI have updated the [SimpleDDD](https://github.com/SneakyPeet/SimpleDDD) project to contain entities.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>Continuing on our Domain Driven Design thread, we will talk about domain specific objects in the next few posts.</p>\n\n<p>We start with the Entity. Entity is one of the three main base objects in our domain core. It is <strong>not</strong> to be confused with an entity in EntityFramework!</p>\n\n<p>In most applications there will be some kind of persistence meaning there will be objects that outlive the lifetime of a usage session. We need to keep track of these objects between sessions and we need to be able to easily identify them. </p>\n\n<p><strong>What is identity?</strong></p>\n\n<ul>\n<li>Identity is a property that is unique across all instances of an object\n<ul><li>Two objects with the same attributes (i.e. they look the same), but with different identity, are not the same object</li></ul></li>\n<li>Identity is not determined by object attributes\n<ul><li>Two objects with different attributes but the same identity, is the same object, although the state of the objects are different</li></ul></li>\n</ul>\n\n<p>Those familiar with SQL will recognize that we usually have a primary key column, and that this is usually an integer generated by the database. As this is a perfect example of identity, it is not the only valid case.</p>\n\n<ul>\n<li>As stated <strong>Integers</strong> (or an equivalent number type) are used.</li>\n<li><strong>Strings</strong> can also be used. A person's name is generally not a good identity as names are not unique. Types in a type table are usually unique and might be a use case. (I need to explore this more)</li>\n<li>In some cases an application has to rely on itself to generate an identity and a <strong>Guid</strong> works great for this purpose.</li>\n<li><strong>Value objects</strong>. This can be an object that can be uniquely identified by its attributes. We will discuss value objects in a later post. </li>\n</ul>\n\n<p><strong>What is Entity?</strong></p>\n\n<ul>\n<li>An Entity has Identity as stated above</li>\n<li>An Entity is responsible for tracking it's state and the rules regulating it's lifecycle (from <a href=\"http://domainlanguage.com/ddd/reference/\">DDD Reference</a> )</li>\n</ul>\n\n<p>An entity is the abstraction we use to model objects with identity.</p>\n\n<p><strong>How would this look?</strong> <code>examples in c#</code></p>\n\n<p>First of all, we will <em>label</em> all our objects with identity as an entity using an interface.</p>\n\n<pre><code class=\"csharp \">public interface IEntity  \n{\n    int Id { get; }\n}\n</code></pre>\n\n<p>Using it like this means that we will always use integers as identity and that we will compare entities using the Id property.</p>\n\n<p>We can improve our entity by allowing different types as identity.  </p>\n\n<pre><code class=\"csharp\"\">public interface IEntity&lt;out TKey&gt;  \n{\n    TKey Id { get; }\n}\n</code></pre>\n\n<p>When comparing an identity that is complex, using <code>id == id</code> might not be enough. In these cases we will add a <code>IsSameAs</code> method to our interface. Using this method we can explicitly state how we want to compare identity.  </p>\n\n<pre><code class=\"csharp\">public interface IComplexEntity&lt;out TKey, in TEntity&gt;  \n{\n    TKey Id { get; }\n    bool IsSameAs(TEntity entity);\n}\n//Object Definition\npublic class User : IComplexEntity&lt;int, User&gt;  \n</code></pre>\n\n<p>We can even reuse <code>IEntity&lt;TKey&gt;</code> and only apply <code>IsSameAs</code> where needed.</p>\n\n<pre><code class=\"csharp\">public interface IComparableEntity&lt;out TKey, in TEntity&gt; : IEntity&lt;TKey&gt;\n\n//We can even use System.IComparable&lt;&gt;\npublic interface IEntityInheritingIComparable&lt;out TKey, in TEntity&gt; : IComparable&lt;TEntity&gt;  \n</code></pre>\n\n<p>The method you choose will highly depend on the problem you need to solve. The right way is the way that best fits your model and is agreed upon by your team.</p>\n\n<p><strong>Where does entity live?</strong></p>\n\n<p>Entity lives at the center of your domain layer. I like to place it in a folder called <code>abstractions</code> together with my other high level DDD concepts. I have also seen this namespace called 'shared' or 'core'. For those who really like separation you can move all your abstractions into its own project.</p>\n\n<p>I have updated the <a href=\"https://github.com/SneakyPeet/SimpleDDD\">SimpleDDD</a> project to contain entities.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1423071789557,"created_by":1,"updated_at":1423149348426,"updated_by":1,"published_at":1423118627515,"published_by":1},{"id":16,"uuid":"d4ae7f15-09a9-4afc-bc9b-2ef0fcc2fe83","title":"Value Objects","slug":"value-objects","markdown":"Continuing on the domain object theme from [my previous post](http://sneakycode.net/entity-is-for-identity/), we will be discussing Value Objects.\n\nTo recap, Domain Entities want to persist their value over time and can be uniquely identified by a single identification property.\n\nNext we will discuss Value Objects. \n\nSo what is it?\n\n**A Value Object is uniquely identified by the values of its properties.** \n\nMultiple instances of a value object with the same properties, represent the same object in a particular context.\n\nA simple example can be a point on an x-y axis.\n\n```csharp\npublic class Point\n{\n\tpublic Point(int x, int y){\n\t\tthis.X = x;\n\t\tthis.Y = y;\n\t}\n    public int X { get; private set; }\n\tpublic int Y { get; private set; }\n}\n\nvar a = new Point(2,5);\nvar b = new Point(2,5);\n```\n\nIt is clear that `point a` and `point b` in our example are the same point because `a.X == b.X` and `a.Y == b.Y`. They represent the exact same value on our graph.\n\nThus identify our object by its value.\n\n**Value objects are immutable.**\n\nIf we need to change the state of a value object, it means that the core of what the value object represents gets changed. This leaves us with the following guidelines.\n\n* A value object will not have methods that changes it's internal state. This is why our setters on `Point` are private.\n* If you need to do a calculation against a value and require a value of the same type back, you return a new instance. This means that the initial value will always keep its   integrity. Another example of this in .net is `DateTime`. The   `AddDays` method on DateTime returns a new DateTime instance. \n```csharp\npublic Point MoveX(int delta)\n{\n    return new Point(this.X + delta, this.Y);\n}\n```\n\n* When you are replacing a value object property on another object, you replace it instead of altering the existing object. \n```csharp\npublic Class Graph \n{\n\tprivate Point startingPoint;\n\tpublic void SetStartingPoint(Point startingPoint)\n\t{\n\t\tthis.startingPoint = startingPoint;\n\t}\n}\n```\n\n**A Real World Example**\n\nNow that we have the basics down, lets look at a more realistic real world example. Suppose we have a `Member` entity with an `Address` property (with `Address` being a value object).\n\nThe biggest difference between our `Point` and `Address` examples are that we would want to store our address for retrieval later. If you read my previous post you are probably wondering if `Address` should not instead be an Entity. That depends 100% on your domain.\n\nLets assume we are storing our Member data in a SQL database, in the member table. We might store our address in one of the following ways.\n\n1. Directly in the member table with a column for each property.\n2. In a separate address table as a one to one mapping. Thus each member still has one address.\n3. In a separate address table as a one to many mapping, assuming that the member can have more than one address.\n\nOur member entity knows nothing about how data gets stored. It will only know that it either has one or many addresses to keep track of.\n\nFor options 1 and 2 we use a value object. Even though for option 2 we have a separate table, we still use a value object as our domain does not care about tables. The member carries the identity so the address does not have to. We can easily write a method to change the member's address.\n\n\n```csharp\npublic Class Member \n{\n\tpublic Address Address { get; private set; }\n\tpublic void ChangeAddress(Address address)\n\t{\n\t\tthis.Address = address;\n\t}\n}\n```\n\nOption 3 provides a bit of a challenge. If we have multiple addresses how do we know which address needs to change? In this case, even though address still fits our value object model, we need to remember that we want to have the address identity over time. This does not count for option 1 and 2 as the member carries the identity. But for option 3 our address needs to carry its identity and will be an entity instead of a value object.\n\n**How to identify a Value Object**\n\nThe next question is how do we point out to other developers that our object is in fact a value object? Most other objects will have their job as part of their name for example `UserRepository` or `MemberFactory` etc. Our entities will inherit from IEntity. We won't be going around calling our address `AddressValueObject` though and inheriting from an interface like `IValueObject` does not make sense since we will not share common functionality. I still feel that it is useful to indicate what our object does. We can do one of the following:\n\n* Inherit from `IValueObject`. Even though I just said that this makes no sense, it does make sense. We are calling our object what it is. \n* You can write a comment. This serves the same function as `IValueObject`, although if you are writing the comment you might as well just add the inheritance.\n* You can leave your object as is, and have the user of the object infer that it is a value object by noting it's immutability and usage.\n\nWhat you choose should be determined by the experience of your team.\n\n___\nWe are by no means done with value objects and in my next post I will be talking about more complex value objects.\n\nPlease post suggestions and critique in the comments. Discussion is how we solve problems well. Till next time.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>Continuing on the domain object theme from <a href=\"http://sneakycode.net/entity-is-for-identity/\">my previous post</a>, we will be discussing Value Objects.</p>\n\n<p>To recap, Domain Entities want to persist their value over time and can be uniquely identified by a single identification property.</p>\n\n<p>Next we will discuss Value Objects. </p>\n\n<p>So what is it?</p>\n\n<p><strong>A Value Object is uniquely identified by the values of its properties.</strong> </p>\n\n<p>Multiple instances of a value object with the same properties, represent the same object in a particular context.</p>\n\n<p>A simple example can be a point on an x-y axis.</p>\n\n<pre><code class=\"csharp\">public class Point  \n{\n    public Point(int x, int y){\n        this.X = x;\n        this.Y = y;\n    }\n    public int X { get; private set; }\n    public int Y { get; private set; }\n}\n\nvar a = new Point(2,5);  \nvar b = new Point(2,5);  \n</code></pre>\n\n<p>It is clear that <code>point a</code> and <code>point b</code> in our example are the same point because <code>a.X == b.X</code> and <code>a.Y == b.Y</code>. They represent the exact same value on our graph.</p>\n\n<p>Thus identify our object by its value.</p>\n\n<p><strong>Value objects are immutable.</strong></p>\n\n<p>If we need to change the state of a value object, it means that the core of what the value object represents gets changed. This leaves us with the following guidelines.</p>\n\n<ul>\n<li>A value object will not have methods that changes it's internal state. This is why our setters on <code>Point</code> are private.</li>\n<li>If you need to do a calculation against a value and require a value of the same type back, you return a new instance. This means that the initial value will always keep its   integrity. Another example of this in .net is <code>DateTime</code>. The   <code>AddDays</code> method on DateTime returns a new DateTime instance. </li>\n</ul>\n\n<pre><code class=\"csharp\">public Point MoveX(int delta)  \n{\n    return new Point(this.X + delta, this.Y);\n}\n</code></pre>\n\n<ul>\n<li>When you are replacing a value object property on another object, you replace it instead of altering the existing object. </li>\n</ul>\n\n<pre><code class=\"csharp\">public Class Graph  \n{\n    private Point startingPoint;\n    public void SetStartingPoint(Point startingPoint)\n    {\n        this.startingPoint = startingPoint;\n    }\n}\n</code></pre>\n\n<p><strong>A Real World Example</strong></p>\n\n<p>Now that we have the basics down, lets look at a more realistic real world example. Suppose we have a <code>Member</code> entity with an <code>Address</code> property (with <code>Address</code> being a value object).</p>\n\n<p>The biggest difference between our <code>Point</code> and <code>Address</code> examples are that we would want to store our address for retrieval later. If you read my previous post you are probably wondering if <code>Address</code> should not instead be an Entity. That depends 100% on your domain.</p>\n\n<p>Lets assume we are storing our Member data in a SQL database, in the member table. We might store our address in one of the following ways.</p>\n\n<ol>\n<li>Directly in the member table with a column for each property.  </li>\n<li>In a separate address table as a one to one mapping. Thus each member still has one address.  </li>\n<li>In a separate address table as a one to many mapping, assuming that the member can have more than one address.</li>\n</ol>\n\n<p>Our member entity knows nothing about how data gets stored. It will only know that it either has one or many addresses to keep track of.</p>\n\n<p>For options 1 and 2 we use a value object. Even though for option 2 we have a separate table, we still use a value object as our domain does not care about tables. The member carries the identity so the address does not have to. We can easily write a method to change the member's address.</p>\n\n<pre><code class=\"csharp\">public Class Member  \n{\n    public Address Address { get; private set; }\n    public void ChangeAddress(Address address)\n    {\n        this.Address = address;\n    }\n}\n</code></pre>\n\n<p>Option 3 provides a bit of a challenge. If we have multiple addresses how do we know which address needs to change? In this case, even though address still fits our value object model, we need to remember that we want to have the address identity over time. This does not count for option 1 and 2 as the member carries the identity. But for option 3 our address needs to carry its identity and will be an entity instead of a value object.</p>\n\n<p><strong>How to identify a Value Object</strong></p>\n\n<p>The next question is how do we point out to other developers that our object is in fact a value object? Most other objects will have their job as part of their name for example <code>UserRepository</code> or <code>MemberFactory</code> etc. Our entities will inherit from IEntity. We won't be going around calling our address <code>AddressValueObject</code> though and inheriting from an interface like <code>IValueObject</code> does not make sense since we will not share common functionality. I still feel that it is useful to indicate what our object does. We can do one of the following:</p>\n\n<ul>\n<li>Inherit from <code>IValueObject</code>. Even though I just said that this makes no sense, it does make sense. We are calling our object what it is. </li>\n<li>You can write a comment. This serves the same function as <code>IValueObject</code>, although if you are writing the comment you might as well just add the inheritance.</li>\n<li>You can leave your object as is, and have the user of the object infer that it is a value object by noting it's immutability and usage.</li>\n</ul>\n\n<p>What you choose should be determined by the experience of your team.</p>\n\n<hr />\n\n<p>We are by no means done with value objects and in my next post I will be talking about more complex value objects.</p>\n\n<p>Please post suggestions and critique in the comments. Discussion is how we solve problems well. Till next time.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":"A Value Object is uniquely identified by the values of its properties. Multiple instances of a value object with the same properties, represent the same object in a particular context.","author_id":1,"created_at":1423582966082,"created_by":1,"updated_at":1423685266572,"updated_by":1,"published_at":1423684024507,"published_by":1},{"id":17,"uuid":"c266dd63-80d9-4be7-b736-cc151807b95e","title":"Make Those Value Objects Work For You","slug":"make-those-value-objects-work-for-you","markdown":"We can have value objects be more than just information carriers. We can have them do some work for us.\n\n**A Scenario**\n\nGiven a contract and some time sheet data for an employee we need to calculate invoice lines for billing a client. \n\nWe can use an object called an InvoiceLineCalculator to calculate the resulting invoice lines. Even though an object like this feels different from the [ValueObjects we talked about previously](http://sneakycode.net/value-objects/), I am going to argue that it can in fact be a ValueObject if we follow these rules:\n\n* It can be identified by the value of its outputs\n* It is immutable\n\nThe calculated invoice lines should always be the same given the same calculator input data, thus satisfying the first rule. \n\nWe satisfy immutability by enforcing two things: \n\n* After calculation we should not be able to change the output values of the calculator. We achieve this by using private setters and concepts like IReadonlyList<T>.\n* We should also not keep references to input data. Even though we might pass complex objects to the calculator via its constructor, we should not keep references to these objects. Firstly we might not want to keep these objects around as long as our calculator. Secondly if we keep references around we run the risk of depending on these references in our output, thus if another object changes values on our reference object, it might cause changes to our ValueObject output, breaking immutability.\n\n**But can't we just use a Domain Service?**\n\nShort answer, yes! Long answer, it depends. For the simple example above it might make sense to just have a domain service with a calculate method that returns the invoice lines. But let's say there are multiple contract types, each with its own invoicing rules. Furthermore we might expect to be provided with other data regarding the calculation. This would mean our service has to know the calculations for all the different contract types. The service will soon become cluttered with details of each calculation. \n\nBelow is an example of an InvoiceLineCalculator as a ValueObject.\n\n```csharp\npublic class WeeklyRetainerLineCalculator : IInvoiceLineCalculator\n{\n    public bool ShouldInvoice { get; private set; }\n    public IReadOnlyList<InvoiceLine> InvoiceLines { get; private set; }\n\n\tpublic WeeklyRetainerLineCalculator(Retainer retainer, List<Timesheet> timesheets )\n    {\n        Calculate(retainer, timesheets);\n    }\n\n    private void Calculate(Retainer retainer, List<Timesheet> timesheets)\n    {\n        //calculate invoice lines\n    }\n}\n```\n\nHaving a single object per contract type proves to be cleaner. Note the immutability. Note the single responsibility. We will typically use a factory to construct our different calculator types based on input values. This means that when we need to add another contract/calculator type, we do not have to edit any control flow. We just add the decision line in our factory and implement the new calculator. Polymorph much?\n\nAnother great side effect of the above code is that it is easily testable and if needed the class can be removed with very little side effects. It is of course very important to name these classes well, to make the intent clear.\n\n**But Why**\n\nThe most important thing to take away from this post is that immutability is your friend. When you set out to write immutable objects, intent stays clear, side-effects are limited and ultimately bugs are avoided.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>\n ","html":"<p>We can have value objects be more than just information carriers. We can have them do some work for us.</p>\n\n<p><strong>A Scenario</strong></p>\n\n<p>Given a contract and some time sheet data for an employee we need to calculate invoice lines for billing a client. </p>\n\n<p>We can use an object called an InvoiceLineCalculator to calculate the resulting invoice lines. Even though an object like this feels different from the <a href=\"http://sneakycode.net/value-objects/\">ValueObjects we talked about previously</a>, I am going to argue that it can in fact be a ValueObject if we follow these rules:</p>\n\n<ul>\n<li>It can be identified by the value of its outputs</li>\n<li>It is immutable</li>\n</ul>\n\n<p>The calculated invoice lines should always be the same given the same calculator input data, thus satisfying the first rule. </p>\n\n<p>We satisfy immutability by enforcing two things: </p>\n\n<ul>\n<li>After calculation we should not be able to change the output values of the calculator. We achieve this by using private setters and concepts like IReadonlyList<T>.</li>\n<li>We should also not keep references to input data. Even though we might pass complex objects to the calculator via its constructor, we should not keep references to these objects. Firstly we might not want to keep these objects around as long as our calculator. Secondly if we keep references around we run the risk of depending on these references in our output, thus if another object changes values on our reference object, it might cause changes to our ValueObject output, breaking immutability.</li>\n</ul>\n\n<p><strong>But can't we just use a Domain Service?</strong></p>\n\n<p>Short answer, yes! Long answer, it depends. For the simple example above it might make sense to just have a domain service with a calculate method that returns the invoice lines. But let's say there are multiple contract types, each with its own invoicing rules. Furthermore we might expect to be provided with other data regarding the calculation. This would mean our service has to know the calculations for all the different contract types. The service will soon become cluttered with details of each calculation. </p>\n\n<p>Below is an example of an InvoiceLineCalculator as a ValueObject.</p>\n\n<pre><code class=\"csharp\">public class WeeklyRetainerLineCalculator : IInvoiceLineCalculator  \n{\n    public bool ShouldInvoice { get; private set; }\n    public IReadOnlyList&lt;InvoiceLine&gt; InvoiceLines { get; private set; }\n\n    public WeeklyRetainerLineCalculator(Retainer retainer, List&lt;Timesheet&gt; timesheets )\n    {\n        Calculate(retainer, timesheets);\n    }\n\n    private void Calculate(Retainer retainer, List&lt;Timesheet&gt; timesheets)\n    {\n        //calculate invoice lines\n    }\n}\n</code></pre>\n\n<p>Having a single object per contract type proves to be cleaner. Note the immutability. Note the single responsibility. We will typically use a factory to construct our different calculator types based on input values. This means that when we need to add another contract/calculator type, we do not have to edit any control flow. We just add the decision line in our factory and implement the new calculator. Polymorph much?</p>\n\n<p>Another great side effect of the above code is that it is easily testable and if needed the class can be removed with very little side effects. It is of course very important to name these classes well, to make the intent clear.</p>\n\n<p><strong>But Why</strong></p>\n\n<p>The most important thing to take away from this post is that immutability is your friend. When you set out to write immutable objects, intent stays clear, side-effects are limited and ultimately bugs are avoided.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1424286077379,"created_by":1,"updated_at":1425474179219,"updated_by":1,"published_at":1424286126338,"published_by":1},{"id":18,"uuid":"60ceae15-a089-407e-8a60-9d753eb46cc6","title":"Getting Started With Chat Ops","slug":"getting-started-with-chat-ops","markdown":"I recently gave a talk about ChatOps at [Entelect's Dev Day](http://entelect.co.za). The talk went really well and after some discussion with attendees I thought it might be useful to write  a post about how to get started with chat ops.\n\n___\n**So What is ChatOps?**\n\nTo understand ChatOps we first need to talk about DevOps. DevOps is about knocking down barriers between developers and operations and in doing so reducing orginizational friction. Source control, continuous integration and automated deploy all form part of DevOps. DevOps helps us go fast while still going clean. At the heart of DevOps is CAMS. To move fast and maintain stability, it is important to have a **culture** of **automation**, **measurement** and **sharing**. ChatOps is an extension of DevOps and enhances it with and extreme focus on CAMS. \n\n**What are the Benefits?**\n\nChatOps moves all your everyday tasks into one place, where everyone can see it. Your tools become part of your conversation. This provides you with a history of events. No longer do you have to ask questions like \"Is the build green\" or \"are you finished deploying\". Just have a look in your chat room.\n\nIt creates a passive learning environment for new team members. They see how everything is done just by participating in the chat. It is like pair programming but for DevOps. You teach them by just doing your daily tasks.\n\nIt hides your ugly. No longer do you have to manage access to all the tools that you use. You don't have to remember urls and passwords. You provide a single access point for everyone, inside your chat room.\n\nIt improves remoting. You can easily manage tasks using the chat app on your phone, from anywhere. Want to check site load on your commute? Now you can easily do that and other tasks from your chat room.\n\nLastly it improves speed and repeatability. When you automate tasks and provide simple access to all your tasks in one place, speed increases and human error likelihood decreases.\n\n**How do I get started with ChatOps?**\n\nWell, first of all you will need a chat solution that provides **inline imaging** and **has an API**. There are many good ones out there, but a good start might be [Hipchat](http://hipchat.com) or [Slack](https://slack.com/). \n\nNext, get yourself a chat robot. This robot is your chat room butler. You ask him to do various things to make your life fun and easy. There are a few bots out there, written in various languages, the most used being [Hubot](https://hubot.github.com/), [Lita](https://www.lita.io/) and [Err](http://errbot.net/).\n\n![hubot](http://res.cloudinary.com/dltpyggxx/image/upload/v1424792361/hubot2_spk5mw.jpg)\n\nThe next, **most important** step, is to start building a **culture** of chat ops in your team. Regardless of how amazing you make your automation tools, if the culture is non-existent, you are wasting your time. Here is how you start building that culture:\n\n* Create a chat room for your team/project. Start moving communication into this chat room and away from email. Make sure everyone on your team is online when they are at work and if they are remote, teach them to announce when they come and go. If your team is remote you can start moving daily standup into chat as well.\n*  Next start using your chat robot to add some fun in your chat room. Give it the ability to fetch random images or videos for you. Have it make memes and answer eight ball questions. There are many fun scripts out there to help you get started with The Fun. \n*  Create fun chat room based games for your team and play them on a regular basis. On our team we have crap song Friday, where everyone needs to paste a video of a song that is just bad. We also play WTF roulette where everyone ask Hubot to get a WTF image until we get something really bad and then we quickly hide it with a [pug bomb](https://www.npmjs.com/package/hubot-pugme).\n\nOk I can hear you saying that this just generates a lot of noise. And you are right, your team can run the risk of losing valid information due to noise generated, but again this comes down to team culture. Make simple rules about \"noise\". We easily solved this by having one general chat room and separate chatrooms for specific projects. In the general chat anything goes and you move important content to relevant chat rooms. Also do not be afraid of change. If something just does not work, chuck it and try something else. Each person and team is unique, so figure out what works for you.\n\n![Aliens Guy ChatOps](http://res.cloudinary.com/dltpyggxx/image/upload/v1424792359/Capsdfdsfdsfture_s7w2br.png)\nThe next step is to start making it **informative**. Start posting notifications into the room using the chat app's api, web hooks and tools like IFTTT and Zapier. Did a CI build fail? Post that into the chat. Did someone push to master? Post that into the chat. Has a ticket been created on the backlog? Did someone mention your product on twitter? Was there an application exception? Post it to your chat room. Whenever you find yourself having to go check if an event occured, move that into your chat room.\n\nLastly make it **productive**. Identify simple tasks that you can automate. Get your chat robot to start and stop CI builds, create trello tickets and draw yourself a graph of the server load over the last 24 hours. Start using the Api's of the tools that you rely on. Once you have automated these simple tasks, go on and start automating the difficult ones. Have your chat bot do a production deploy or setup everything that you need when a new employee joins your team.\n\n![Hubot build team city build](http://res.cloudinary.com/dltpyggxx/image/upload/v1424792383/build_ov1kau.png)\n\n___\nChatOps has the potential to provide a ton of value. Better communication, engaged team members, more speed, reliability and overall fun. However do not expect buy-in from everyone from the get go. The success of your ChatOps endeavour hinges on the culture that you create. Spend your time here. It took my team about a year to build culture and we are only now starting to make it the chatroom productive. \nRealise the potential of Api's. Anything that exposes an api can potentially be used by your chat robot. Anything with a web hook can push info to you. I will dare say that anything will become possible.\n\nGood luck and happy chats.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>I recently gave a talk about ChatOps at <a href=\"http://entelect.co.za\">Entelect's Dev Day</a>. The talk went really well and after some discussion with attendees I thought it might be useful to write  a post about how to get started with chat ops.</p>\n\n<hr />\n\n<p><strong>So What is ChatOps?</strong></p>\n\n<p>To understand ChatOps we first need to talk about DevOps. DevOps is about knocking down barriers between developers and operations and in doing so reducing orginizational friction. Source control, continuous integration and automated deploy all form part of DevOps. DevOps helps us go fast while still going clean. At the heart of DevOps is CAMS. To move fast and maintain stability, it is important to have a <strong>culture</strong> of <strong>automation</strong>, <strong>measurement</strong> and <strong>sharing</strong>. ChatOps is an extension of DevOps and enhances it with and extreme focus on CAMS. </p>\n\n<p><strong>What are the Benefits?</strong></p>\n\n<p>ChatOps moves all your everyday tasks into one place, where everyone can see it. Your tools become part of your conversation. This provides you with a history of events. No longer do you have to ask questions like \"Is the build green\" or \"are you finished deploying\". Just have a look in your chat room.</p>\n\n<p>It creates a passive learning environment for new team members. They see how everything is done just by participating in the chat. It is like pair programming but for DevOps. You teach them by just doing your daily tasks.</p>\n\n<p>It hides your ugly. No longer do you have to manage access to all the tools that you use. You don't have to remember urls and passwords. You provide a single access point for everyone, inside your chat room.</p>\n\n<p>It improves remoting. You can easily manage tasks using the chat app on your phone, from anywhere. Want to check site load on your commute? Now you can easily do that and other tasks from your chat room.</p>\n\n<p>Lastly it improves speed and repeatability. When you automate tasks and provide simple access to all your tasks in one place, speed increases and human error likelihood decreases.</p>\n\n<p><strong>How do I get started with ChatOps?</strong></p>\n\n<p>Well, first of all you will need a chat solution that provides <strong>inline imaging</strong> and <strong>has an API</strong>. There are many good ones out there, but a good start might be <a href=\"http://hipchat.com\">Hipchat</a> or <a href=\"https://slack.com/\">Slack</a>. </p>\n\n<p>Next, get yourself a chat robot. This robot is your chat room butler. You ask him to do various things to make your life fun and easy. There are a few bots out there, written in various languages, the most used being <a href=\"https://hubot.github.com/\">Hubot</a>, <a href=\"https://www.lita.io/\">Lita</a> and <a href=\"http://errbot.net/\">Err</a>.</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1424792361/hubot2_spk5mw.jpg\" alt=\"hubot\" /></p>\n\n<p>The next, <strong>most important</strong> step, is to start building a <strong>culture</strong> of chat ops in your team. Regardless of how amazing you make your automation tools, if the culture is non-existent, you are wasting your time. Here is how you start building that culture:</p>\n\n<ul>\n<li>Create a chat room for your team/project. Start moving communication into this chat room and away from email. Make sure everyone on your team is online when they are at work and if they are remote, teach them to announce when they come and go. If your team is remote you can start moving daily standup into chat as well.</li>\n<li>Next start using your chat robot to add some fun in your chat room. Give it the ability to fetch random images or videos for you. Have it make memes and answer eight ball questions. There are many fun scripts out there to help you get started with The Fun. </li>\n<li>Create fun chat room based games for your team and play them on a regular basis. On our team we have crap song Friday, where everyone needs to paste a video of a song that is just bad. We also play WTF roulette where everyone ask Hubot to get a WTF image until we get something really bad and then we quickly hide it with a <a href=\"https://www.npmjs.com/package/hubot-pugme\">pug bomb</a>.</li>\n</ul>\n\n<p>Ok I can hear you saying that this just generates a lot of noise. And you are right, your team can run the risk of losing valid information due to noise generated, but again this comes down to team culture. Make simple rules about \"noise\". We easily solved this by having one general chat room and separate chatrooms for specific projects. In the general chat anything goes and you move important content to relevant chat rooms. Also do not be afraid of change. If something just does not work, chuck it and try something else. Each person and team is unique, so figure out what works for you.</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1424792359/Capsdfdsfdsfture_s7w2br.png\" alt=\"Aliens Guy ChatOps\" />\nThe next step is to start making it <strong>informative</strong>. Start posting notifications into the room using the chat app's api, web hooks and tools like IFTTT and Zapier. Did a CI build fail? Post that into the chat. Did someone push to master? Post that into the chat. Has a ticket been created on the backlog? Did someone mention your product on twitter? Was there an application exception? Post it to your chat room. Whenever you find yourself having to go check if an event occured, move that into your chat room.</p>\n\n<p>Lastly make it <strong>productive</strong>. Identify simple tasks that you can automate. Get your chat robot to start and stop CI builds, create trello tickets and draw yourself a graph of the server load over the last 24 hours. Start using the Api's of the tools that you rely on. Once you have automated these simple tasks, go on and start automating the difficult ones. Have your chat bot do a production deploy or setup everything that you need when a new employee joins your team.</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1424792383/build_ov1kau.png\" alt=\"Hubot build team city build\" /></p>\n\n<hr />\n\n<p>ChatOps has the potential to provide a ton of value. Better communication, engaged team members, more speed, reliability and overall fun. However do not expect buy-in from everyone from the get go. The success of your ChatOps endeavour hinges on the culture that you create. Spend your time here. It took my team about a year to build culture and we are only now starting to make it the chatroom productive. <br />\nRealise the potential of Api's. Anything that exposes an api can potentially be used by your chat robot. Anything with a web hook can push info to you. I will dare say that anything will become possible.</p>\n\n<p>Good luck and happy chats.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":"ChatOps moves all your everyday tasks into one place, where everyone can see it. Your tools become part of your conversation.","author_id":1,"created_at":1424791603113,"created_by":1,"updated_at":1425474201169,"updated_by":1,"published_at":1424792635094,"published_by":1},{"id":19,"uuid":"31bf44b5-b47f-47be-b4f8-21eda77287f0","title":"Modeling with Aggregates","slug":"modeling-with-aggregates","markdown":"Modeling is at the heart of Domain Driven Design. It is also the reason that there are not many DDD examples out there. It is easy to give an example of an architecture like MVC as the different parts are very logical. But with DDD each solution is so tightly coupled to the domain and the problem that needs to be solved that simple examples rarely captures the essence of what a successful model might be. Learning how to model cannot just be taught in a blog post, or even a few. It is a learned skill that takes time, some might say years, to learn. You need to get your hands dirty. That said there are tools that you use with you modeling. Entities and value objects form part of these tools, but probably the most important one is the aggregate.\n\n**So what is an Aggregate?**\n\nTypical flow through the application layer ([or api](http://sneakycode.net/domain-driven-design-app-structure/)) might look something like this: \n\n![Typical DDD action flow](http://res.cloudinary.com/dltpyggxx/image/upload/v1426189853/Capture1_pobevv.png)\n\nIn some cases the *Does work on the domain* step might look as follows:\n\n![Typical DDD aggregate flow](http://res.cloudinary.com/dltpyggxx/image/upload/v1426189853/Capture2_wsiypi.png)\n\nWhat you need to understand is that aggregates are self-contained units that we work with to avoid messing up our code with a tangle of interconnected objects. Just like the application layer contains the application and provides access to it via clearly defined entry points, the aggregate contains all information that it needs and the methods to do the required work. Our entire domain centers on these aggregates. If we fail at aggregates, we fail at DDD.\n\n**So how are they made and used?**\n\nAn aggregate is typically made as follows\n\n* The domain makes a new instance. Typically using a factory.\n* The application layer asks a repository to build up an instance from existing data.\n\nand used as follows\n\n* Directly by the application layer.\n* By some domain service when we need to work on multiple aggregates.\n\n**What does an Aggregate look like**\n\nAn aggregate is made up of two main parts namely a boundary and a root.\n\n![Domain Driven Design Aggregate](http://res.cloudinary.com/dltpyggxx/image/upload/v1426190040/AR_gyjejd.png)\nThe boundary(B on the image) defines the contents of the aggregate. It is also the barrier between the aggregate contents and the rest of the application. Nothing outside the boundary can keep a reference to anything inside the boundary. \n\nThe Aggregate Root (AR on the image) provides access to the aggregate contents. It is the only object in the aggregate that objects outside the aggregate may hold a reference to. The aggregate root in turn holds references to the aggregate contents. Although I said it provides access to the contents, it is not direct access. We will not ask the root for an object and then do work on the object. We would ask the aggregate to do the work on the object for us. In-fact we might be oblivious of the objects existence. The contents of an aggregate is made up of our basic DDD building blocks. Entities, Value Objects and other Aggregates. \n\n**Can Haz Example?**\n\nThe best way to give an example of an aggregate is by using the invoice analogy. \n\nOur example aggregate is made up of the following:\n\n* An Invoice\n* A List of Invoice Lines\n* A Customer\n* A Billing Address\n\nIt is fairly straight forward to identify the root. It is the Invoice. The invoice will keep references to it's invoice lines and to the customer the invoice is for. The application in turn will only keep a reference to the invoice. If we want to add or remove invoice lines, we ask the invoice to do so. If we want to update the billing address we ask the invoice. The invoice in turn asks the customer to update it's billing address. In this case the customer is also an aggregate root. The invoice, invoice lines and customer will all typically be Entities. \n\n**So what is the point?**\n\nTo build a rich domain. The goal is to clearly define logical self-contained pieces of work. By clearly defining the boundaries and roots, we directly limit cross cutting dependencies and thus prevent a ball of spaghetti. We force ourselves to get all the information we need upfront, and then do the work we want. We force the lowest level objects to be responsible for their behavior. This makes it easy for us to find behavior as we know where to look for it. This helps us to limit duplicate code. It also makes testing a breeze as we move all our behavior to the center of our application. There are no outward dependencies so mocking is rarely needed and it is easy to maintain close to a 100% code coverage.\n\n___\n   \nThe invoice model is straight forward, but you will probably find that most aggregates are not as easily defined. We should model our aggregates in a way that clearly represents the problem domain and we should use the ubiquitous language shared by developers and domain experts to make their purpose clear.  But this can be really really hard, but is really really worth it. \n\nPractice really makes perfect. If you can find someone that knows how to do model properly and is willing to teach you, it is even better.\n\nMore on aggregates soon ;)\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>Modeling is at the heart of Domain Driven Design. It is also the reason that there are not many DDD examples out there. It is easy to give an example of an architecture like MVC as the different parts are very logical. But with DDD each solution is so tightly coupled to the domain and the problem that needs to be solved that simple examples rarely captures the essence of what a successful model might be. Learning how to model cannot just be taught in a blog post, or even a few. It is a learned skill that takes time, some might say years, to learn. You need to get your hands dirty. That said there are tools that you use with you modeling. Entities and value objects form part of these tools, but probably the most important one is the aggregate.</p>\n\n<p><strong>So what is an Aggregate?</strong></p>\n\n<p>Typical flow through the application layer (<a href=\"http://sneakycode.net/domain-driven-design-app-structure/\">or api</a>) might look something like this: </p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1426189853/Capture1_pobevv.png\" alt=\"Typical DDD action flow\" /></p>\n\n<p>In some cases the <em>Does work on the domain</em> step might look as follows:</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1426189853/Capture2_wsiypi.png\" alt=\"Typical DDD aggregate flow\" /></p>\n\n<p>What you need to understand is that aggregates are self-contained units that we work with to avoid messing up our code with a tangle of interconnected objects. Just like the application layer contains the application and provides access to it via clearly defined entry points, the aggregate contains all information that it needs and the methods to do the required work. Our entire domain centers on these aggregates. If we fail at aggregates, we fail at DDD.</p>\n\n<p><strong>So how are they made and used?</strong></p>\n\n<p>An aggregate is typically made as follows</p>\n\n<ul>\n<li>The domain makes a new instance. Typically using a factory.</li>\n<li>The application layer asks a repository to build up an instance from existing data.</li>\n</ul>\n\n<p>and used as follows</p>\n\n<ul>\n<li>Directly by the application layer.</li>\n<li>By some domain service when we need to work on multiple aggregates.</li>\n</ul>\n\n<p><strong>What does an Aggregate look like</strong></p>\n\n<p>An aggregate is made up of two main parts namely a boundary and a root.</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1426190040/AR_gyjejd.png\" alt=\"Domain Driven Design Aggregate\" />\nThe boundary(B on the image) defines the contents of the aggregate. It is also the barrier between the aggregate contents and the rest of the application. Nothing outside the boundary can keep a reference to anything inside the boundary. </p>\n\n<p>The Aggregate Root (AR on the image) provides access to the aggregate contents. It is the only object in the aggregate that objects outside the aggregate may hold a reference to. The aggregate root in turn holds references to the aggregate contents. Although I said it provides access to the contents, it is not direct access. We will not ask the root for an object and then do work on the object. We would ask the aggregate to do the work on the object for us. In-fact we might be oblivious of the objects existence. The contents of an aggregate is made up of our basic DDD building blocks. Entities, Value Objects and other Aggregates. </p>\n\n<p><strong>Can Haz Example?</strong></p>\n\n<p>The best way to give an example of an aggregate is by using the invoice analogy. </p>\n\n<p>Our example aggregate is made up of the following:</p>\n\n<ul>\n<li>An Invoice</li>\n<li>A List of Invoice Lines</li>\n<li>A Customer</li>\n<li>A Billing Address</li>\n</ul>\n\n<p>It is fairly straight forward to identify the root. It is the Invoice. The invoice will keep references to it's invoice lines and to the customer the invoice is for. The application in turn will only keep a reference to the invoice. If we want to add or remove invoice lines, we ask the invoice to do so. If we want to update the billing address we ask the invoice. The invoice in turn asks the customer to update it's billing address. In this case the customer is also an aggregate root. The invoice, invoice lines and customer will all typically be Entities. </p>\n\n<p><strong>So what is the point?</strong></p>\n\n<p>To build a rich domain. The goal is to clearly define logical self-contained pieces of work. By clearly defining the boundaries and roots, we directly limit cross cutting dependencies and thus prevent a ball of spaghetti. We force ourselves to get all the information we need upfront, and then do the work we want. We force the lowest level objects to be responsible for their behavior. This makes it easy for us to find behavior as we know where to look for it. This helps us to limit duplicate code. It also makes testing a breeze as we move all our behavior to the center of our application. There are no outward dependencies so mocking is rarely needed and it is easy to maintain close to a 100% code coverage.</p>\n\n<hr />\n\n<p>The invoice model is straight forward, but you will probably find that most aggregates are not as easily defined. We should model our aggregates in a way that clearly represents the problem domain and we should use the ubiquitous language shared by developers and domain experts to make their purpose clear.  But this can be really really hard, but is really really worth it. </p>\n\n<p>Practice really makes perfect. If you can find someone that knows how to do model properly and is willing to teach you, it is even better.</p>\n\n<p>More on aggregates soon ;)</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426189505804,"created_by":1,"updated_at":1426434756782,"updated_by":1,"published_at":1426189650050,"published_by":1},{"id":20,"uuid":"21458953-2efb-4f6e-bcab-5a5cde558d87","title":"Getting wooed by F#","slug":"getting-wooed-by-fsharp","markdown":"One of my goals this year is to learn a new programming language. This language should use a programming style different than what I am familiar with (currently C# and Javascript). As I am settled in the .net space I decided to go with F#. I am only about a week in, but man I have to say I am excited. So excited that I could not hold it in any longer and decided to write about what is getting me excited. I have to stress that my F# skills are equivalent to a baby sliding around on its stomach learning to crawl. Regardless, what I have seen so far is awesome.\n\nI am currently working through all the content on [fsharpforfunandprofit](http://fsharpforfunandprofit.com/) by [Scott Wlaschin](https://twitter.com/ScottWlaschin), and I am borrowing the below example come from there.\n\n___\n\nSo my first real surprise is how well F# lends itself to Modeling a Domain. I am going to show you this by using a card game as an example.\n\nHere is what it might look like in c#.\n\n```csharp\npublic enum Suit\n{\n    Club,\n    Diamond,\n    Spade,\n    Heart\n}\n\npublic enum Rank\n{\n    Two,\n    Three,\n    Four,\n    Five,\n    Six,\n    Seven,\n    Eight,\n    Nine,\n    Ten,\n    Jack,\n    Queen,\n    King,\n    Ace\n}\n\npublic class Card\n{\n    public Card(Suit suit, Rank rank)\n    {\n        this.Suit = suit;\n        this.Rank = rank;\n    }\n\n    public Suit Suit { get; private set; }\n    public Rank Rank { get; private set; }\n}\n\npublic class Hand\n{\n    public Hand(List<Card> cards)\n    {\n        this.Cards = cards ?? new List<Card>();\n    }\n\n    public List<Card> Cards { get; private set; }\n}\n\npublic class Deck\n{\n    public Deck(List<Card> cards)\n    {\n        this.Cards = cards ?? new List<Card>();\n    }\n\n    public List<Card> Cards { get; private set; }\n}\n\npublic class Player\n{\n    public Player(string name, Hand hand)\n    {\n        this.Name = name;\n        this.Hand = hand;\n    }\n\n    public string Name { get; private set; }\n    public Hand Hand { get; private set; }\n}\n\npublic class Game\n{\n    public Game(Deck deck, List<Player> players)\n    {\n        this.Deck = deck;\n        this.Players = players ?? new List<Player>();\n    }\n\n    public Deck Deck { get; private set; }\n    public List<Player> Players { get; private set; }\n}\n```\n\nPretty straight forward stuff. I showed this to my wife that knows nothing about code and she had no idea what was going on.\n\nThen I showed her this.\n\n```csharp\nmodule CardGame = \n    \n    type Suit = Club | Diamond | Spade | Heart\n\n    type Rank = Two | Three | Four | Five | Six | Seven | Eight | Nine | Ten | Jack | Queen | King | Ace\n\n    type Card = Suit * Rank\n\n    type Hand = Card list\n\n    type Deck = Card list\n\n    type Player = { Name:string; Hand:Hand}\n\n    type Game = {Deck:Deck; Players: Player list}\n\n    type Deal = Deck -> (Deck*Card)\n    \n    type PickupCard = (Hand*Card) -> Hand\n```\n\nThe above is not pseudo code. It valid f# that compiles. First note the total number of lines. 80 vs 19 like what! I showed this to my wife and even though I still had to explain some of it, she got the gist just by looking at it. This means that a domain expert should fairly easily be able to confirm a domain model correctness, without understanding f#. \n\nI know there is no behavior in the above example, but the conciseness and lack of clutter really got my attention. When the f# guys where talking about writing less code, they where not kidding. \n\nWhat is not apparent from the example is that you get a lot of things for free\n\n* Types are immutable by default. GoGo [Value Types](http://sneakycode.net/value-objects/). Mutability can be chosen explicitly, but the immutability forces us to transform data into new data, rather than changing it. This prevents bugs and side effects.\n* Types are equatable by default. We get comparison, max, min and ordering for free. Again this is great for Value Types.\n\n```csharp\nlet highcard = (Heart, Ace)\nlet lowcard = (Club, Six)\nhighcard < lowcard //false\nlet randomcard = (Club,Six)\nlowcard = randomcard //true\n```\n\n* Null reference exceptions are excluded from the above code as non of these types can be null. If you need nullable functionality, you add it explicitly.\n* New primitive types are basically free. We can easily make a string type that has to be less than 40 characters and then use that where we have a less than 40 characters business rule. Although this is possible in c#, it is a lot more code and hassle and we end up not doing it.\n* Less code means less bugs.\n\nI am going to stop here before I re-write [Scott's](https://twitter.com/ScottWlaschin) website. I have not even began to scratch the surface, but if what I have uncovered so far is an indication of what is to come, I am definitely going to become an F# developer. \n\nI also found a [Case Study for Type-safe Domain Modeling in F#](http://deliberate-software.com/pattern-matching-case-study/) on reddit.\n\nand this [Does the Language You Use Make a Difference (revisited)?](http://simontylercousins.net/does-the-language-you-use-make-a-difference-revisited/)\n\nIf you want to find out more have a look at the [Why use F#](http://fsharpforfunandprofit.com/why-use-fsharp/) series.\n\n___\n**Update**\n\nTo give some credit back to c# I did the following\n\n* Put all the enums on one line, even though this is not convention\n* Auto initialized the lists (available in C# 6)\n\nThis brought the line count for c# down to 55 vs 19 for f#. I then figured you can write everything on one line and that a word/character count might be a better metric. C# had 160 words and 1063 characters. F# 82 Words and 457 Characters. There is still a significant difference. \n\nI also feel the need to say that I still love c# and I think it is a great language. This post was less about c# being long winded and more about f# being really compact.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>\n","html":"<p>One of my goals this year is to learn a new programming language. This language should use a programming style different than what I am familiar with (currently C# and Javascript). As I am settled in the .net space I decided to go with F#. I am only about a week in, but man I have to say I am excited. So excited that I could not hold it in any longer and decided to write about what is getting me excited. I have to stress that my F# skills are equivalent to a baby sliding around on its stomach learning to crawl. Regardless, what I have seen so far is awesome.</p>\n\n<p>I am currently working through all the content on <a href=\"http://fsharpforfunandprofit.com/\">fsharpforfunandprofit</a> by <a href=\"https://twitter.com/ScottWlaschin\">Scott Wlaschin</a>, and I am borrowing the below example come from there.</p>\n\n<hr />\n\n<p>So my first real surprise is how well F# lends itself to Modeling a Domain. I am going to show you this by using a card game as an example.</p>\n\n<p>Here is what it might look like in c#.</p>\n\n<pre><code class=\"csharp\">public enum Suit  \n{\n    Club,\n    Diamond,\n    Spade,\n    Heart\n}\n\npublic enum Rank  \n{\n    Two,\n    Three,\n    Four,\n    Five,\n    Six,\n    Seven,\n    Eight,\n    Nine,\n    Ten,\n    Jack,\n    Queen,\n    King,\n    Ace\n}\n\npublic class Card  \n{\n    public Card(Suit suit, Rank rank)\n    {\n        this.Suit = suit;\n        this.Rank = rank;\n    }\n\n    public Suit Suit { get; private set; }\n    public Rank Rank { get; private set; }\n}\n\npublic class Hand  \n{\n    public Hand(List&lt;Card&gt; cards)\n    {\n        this.Cards = cards ?? new List&lt;Card&gt;();\n    }\n\n    public List&lt;Card&gt; Cards { get; private set; }\n}\n\npublic class Deck  \n{\n    public Deck(List&lt;Card&gt; cards)\n    {\n        this.Cards = cards ?? new List&lt;Card&gt;();\n    }\n\n    public List&lt;Card&gt; Cards { get; private set; }\n}\n\npublic class Player  \n{\n    public Player(string name, Hand hand)\n    {\n        this.Name = name;\n        this.Hand = hand;\n    }\n\n    public string Name { get; private set; }\n    public Hand Hand { get; private set; }\n}\n\npublic class Game  \n{\n    public Game(Deck deck, List&lt;Player&gt; players)\n    {\n        this.Deck = deck;\n        this.Players = players ?? new List&lt;Player&gt;();\n    }\n\n    public Deck Deck { get; private set; }\n    public List&lt;Player&gt; Players { get; private set; }\n}\n</code></pre>\n\n<p>Pretty straight forward stuff. I showed this to my wife that knows nothing about code and she had no idea what was going on.</p>\n\n<p>Then I showed her this.</p>\n\n<pre><code class=\"csharp\">module CardGame = \n\n    type Suit = Club | Diamond | Spade | Heart\n\n    type Rank = Two | Three | Four | Five | Six | Seven | Eight | Nine | Ten | Jack | Queen | King | Ace\n\n    type Card = Suit * Rank\n\n    type Hand = Card list\n\n    type Deck = Card list\n\n    type Player = { Name:string; Hand:Hand}\n\n    type Game = {Deck:Deck; Players: Player list}\n\n    type Deal = Deck -&gt; (Deck*Card)\n\n    type PickupCard = (Hand*Card) -&gt; Hand\n</code></pre>\n\n<p>The above is not pseudo code. It valid f# that compiles. First note the total number of lines. 80 vs 19 like what! I showed this to my wife and even though I still had to explain some of it, she got the gist just by looking at it. This means that a domain expert should fairly easily be able to confirm a domain model correctness, without understanding f#. </p>\n\n<p>I know there is no behavior in the above example, but the conciseness and lack of clutter really got my attention. When the f# guys where talking about writing less code, they where not kidding. </p>\n\n<p>What is not apparent from the example is that you get a lot of things for free</p>\n\n<ul>\n<li>Types are immutable by default. GoGo <a href=\"http://sneakycode.net/value-objects/\">Value Types</a>. Mutability can be chosen explicitly, but the immutability forces us to transform data into new data, rather than changing it. This prevents bugs and side effects.</li>\n<li>Types are equatable by default. We get comparison, max, min and ordering for free. Again this is great for Value Types.</li>\n</ul>\n\n<pre><code class=\"csharp\">let highcard = (Heart, Ace)  \nlet lowcard = (Club, Six)  \nhighcard &lt; lowcard //false  \nlet randomcard = (Club,Six)  \nlowcard = randomcard //true  \n</code></pre>\n\n<ul>\n<li>Null reference exceptions are excluded from the above code as non of these types can be null. If you need nullable functionality, you add it explicitly.</li>\n<li>New primitive types are basically free. We can easily make a string type that has to be less than 40 characters and then use that where we have a less than 40 characters business rule. Although this is possible in c#, it is a lot more code and hassle and we end up not doing it.</li>\n<li>Less code means less bugs.</li>\n</ul>\n\n<p>I am going to stop here before I re-write <a href=\"https://twitter.com/ScottWlaschin\">Scott's</a> website. I have not even began to scratch the surface, but if what I have uncovered so far is an indication of what is to come, I am definitely going to become an F# developer. </p>\n\n<p>I also found a <a href=\"http://deliberate-software.com/pattern-matching-case-study/\">Case Study for Type-safe Domain Modeling in F#</a> on reddit.</p>\n\n<p>and this <a href=\"http://simontylercousins.net/does-the-language-you-use-make-a-difference-revisited/\">Does the Language You Use Make a Difference (revisited)?</a></p>\n\n<p>If you want to find out more have a look at the <a href=\"http://fsharpforfunandprofit.com/why-use-fsharp/\">Why use F#</a> series.</p>\n\n<hr />\n\n<p><strong>Update</strong></p>\n\n<p>To give some credit back to c# I did the following</p>\n\n<ul>\n<li>Put all the enums on one line, even though this is not convention</li>\n<li>Auto initialized the lists (available in C# 6)</li>\n</ul>\n\n<p>This brought the line count for c# down to 55 vs 19 for f#. I then figured you can write everything on one line and that a word/character count might be a better metric. C# had 160 words and 1063 characters. F# 82 Words and 457 Characters. There is still a significant difference. </p>\n\n<p>I also feel the need to say that I still love c# and I think it is a great language. This post was less about c# being long winded and more about f# being really compact.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1426603703870,"created_by":1,"updated_at":1426829718508,"updated_by":1,"published_at":1426685154370,"published_by":1},{"id":21,"uuid":"befff682-74e2-4ab1-935a-6de28986f0ce","title":"Aggregates and Persistence","slug":"aggregates-and-persistence","markdown":"In a previous post I gave an overview of [aggregates](http://sneakycode.net/modeling-with-aggregates/). In that post I said that aggregates are self-contained units that we work with to avoid messing up our code. Aggregates help us build a rich domain. This is a domain that knows about itself. When you want to know something, you ask the domain. When you want something done, you ask the domain. For the domain to be able to answer your questions and perform your tasks, it needs all the information. To do this we construct our aggregates with all the data that they need. Ideally we would like our control flow to look something like this:\n\n```csharp\n\napiLayer.DoSomeWork()\n{\n\tdomain = dataLayer.getData()\n\tdomain.doTheWork()\n\tdataLayer.saveData()\n}\n```\n\nTo achieve this we need to limit our trips to the persistence layer. This means we load all the data that we need upfront, and then construct our aggregate. To take it one step further we can ask our persistence layer to provide us with our constructed aggregate. This is where dependence on the domain become apparent. For the persistence layer to provide us with a domain object, it needs to know about the domain. When thinking about layered architecture we are used to the persistence layer being at the center of the onion. But moving the domain into the center means that we can model our domain without ever caring about persistence. This reduces dependencies in the domain considerably, meaning that our domain is void of program flow clutter, clearly defined and very testable. The problem we need to solve becomes the focus of our application.\n\nDomain Driven Design typically uses the repository pattern. Our repositories are responsible to abstract the persistence details away from our domain. All that the domain will know is that it can get data in the form of aggregates and persist data in the form of aggregates. To do this we do two things\n\n* We declare the interface for our repositories in the domain layer. This might seem counter intuitive, but having our interface live in the domain layer means that we completely decouple our persistence from our app. Thus if we are forced to change the persistence implementation, the only code we need to write is our new implementation and update our dependency injection. Our application layer will be ignorant of this change (except for DI code) because as far as it is concerned it uses the contracts defined in the domain. Well how often do we actually change out our persistence? Not that often, but the principle extends beyond just persistence. We use it for other infrastructure code as well. I currently have colleagues who need to change from LINQ to SQL to EntityFramework, and if they had this in place the change would have been a lot less hectic\n* The second thing we do is return Aggregates (and not entities) from our persistence layer. This is to force us to load all we need to answer the questions we have. This does mean that the mapping from our persistence to our domain will be more complex, but moving this code out of our application and domain layers means that intent becomes clear and that we are moving toward single responsibility. Domain handles rules, Application handles flow and Persistence handles data mapping.\n\nThe above concepts might be weird at first and it is something that needs to be wrestled with and tried before the usefulness can be experienced. It is also not always straight forward to implement the persistence layer, but the gains are worth it.\n\nThe next big question to ask is whether to use generic repos or not, but this is a topic for another post.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>In a previous post I gave an overview of <a href=\"http://sneakycode.net/modeling-with-aggregates/\">aggregates</a>. In that post I said that aggregates are self-contained units that we work with to avoid messing up our code. Aggregates help us build a rich domain. This is a domain that knows about itself. When you want to know something, you ask the domain. When you want something done, you ask the domain. For the domain to be able to answer your questions and perform your tasks, it needs all the information. To do this we construct our aggregates with all the data that they need. Ideally we would like our control flow to look something like this:</p>\n\n<pre><code class=\"csharp\">apiLayer.DoSomeWork()  \n{\n    domain = dataLayer.getData()\n    domain.doTheWork()\n    dataLayer.saveData()\n}\n</code></pre>\n\n<p>To achieve this we need to limit our trips to the persistence layer. This means we load all the data that we need upfront, and then construct our aggregate. To take it one step further we can ask our persistence layer to provide us with our constructed aggregate. This is where dependence on the domain become apparent. For the persistence layer to provide us with a domain object, it needs to know about the domain. When thinking about layered architecture we are used to the persistence layer being at the center of the onion. But moving the domain into the center means that we can model our domain without ever caring about persistence. This reduces dependencies in the domain considerably, meaning that our domain is void of program flow clutter, clearly defined and very testable. The problem we need to solve becomes the focus of our application.</p>\n\n<p>Domain Driven Design typically uses the repository pattern. Our repositories are responsible to abstract the persistence details away from our domain. All that the domain will know is that it can get data in the form of aggregates and persist data in the form of aggregates. To do this we do two things</p>\n\n<ul>\n<li>We declare the interface for our repositories in the domain layer. This might seem counter intuitive, but having our interface live in the domain layer means that we completely decouple our persistence from our app. Thus if we are forced to change the persistence implementation, the only code we need to write is our new implementation and update our dependency injection. Our application layer will be ignorant of this change (except for DI code) because as far as it is concerned it uses the contracts defined in the domain. Well how often do we actually change out our persistence? Not that often, but the principle extends beyond just persistence. We use it for other infrastructure code as well. I currently have colleagues who need to change from LINQ to SQL to EntityFramework, and if they had this in place the change would have been a lot less hectic</li>\n<li>The second thing we do is return Aggregates (and not entities) from our persistence layer. This is to force us to load all we need to answer the questions we have. This does mean that the mapping from our persistence to our domain will be more complex, but moving this code out of our application and domain layers means that intent becomes clear and that we are moving toward single responsibility. Domain handles rules, Application handles flow and Persistence handles data mapping.</li>\n</ul>\n\n<p>The above concepts might be weird at first and it is something that needs to be wrestled with and tried before the usefulness can be experienced. It is also not always straight forward to implement the persistence layer, but the gains are worth it.</p>\n\n<p>The next big question to ask is whether to use generic repos or not, but this is a topic for another post.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427898906183,"created_by":1,"updated_at":1427907034725,"updated_by":1,"published_at":1427898900000,"published_by":1},{"id":22,"uuid":"52986ae0-e71e-418f-875d-b45ea6bf1c58","title":"Anemia induced memory loss","slug":"anemia-induced-memory-loss","markdown":"I have been reading [Implementing Domain Driven Design](https://vaughnvernon.co/?page_id=168) by Vaughn Vernon. In it he mentions the concept of Anemia induced memory loss. Say what? Basically an anemic domain is a domain that lacks information about itself. All of its information lives in other places(like services). For you to learn about the domain, you have to know where to go look. This usually also requires some context about the decisions that the developer that wrote that piece of functionality made. As time goes by, this context gets lost, meaning all those details you had to know is either hard to find or completely lost. There is no one place to find the context thus you have to look everywhere. This is what anemia induced memory loss means.\n\nDDD combats this by focusing on a rich domain. A domain that knows everything about itself. The domain no longer asks the questions, it provides the answers.  If you need to know something about something, you go to that something and find it out. To achieve this however, is not an easy skill to learn. We need to learn to model a domain that makes sense to both developers and domain experts. Ubiquitous language and aggregates are the key. However it takes time and practice and guidance to really become a modeling master. \n\nLuckily we have a new initiative at our company called [Entelect](http://www.entelect.co.za/) Dojo, and my buddy [Eugene](https://twitter.com/eldevilliers) and myself gave a talk on domain driven design and how to start thinking \"rich domain\". We had a nice comparison of a domain implemented using [transaction script](http://martinfowler.com/eaaCatalog/transactionScript.html)(aka anemic domain) and a rich domain model. The Anemia induced memory loss is blatantly obvious so I thought I would run through the two examples. This will also give you a sense of how to start thinking rich domain.\n\n___\n###First we need some requirements.\n\n* Employees can capture Annual and Study leave.\n* There are various rules around capturing leave.\n\n___\n###Anemic Domain\nTypically we will have a `LeaveEntry` poco that we use everywhere. We might also have a `LeaveService` that is responsible for control flow (mapping, validation, persistence) and business rules.\n\n```csharp\npublic enum LeaveType\n{\n    Annual,\n    Study\n}\n\npublic class LeaveEntry\n{\n    public LeaveEntry()\n    {\n        this.Approvers = new List<Employee>();\n    }\n\n    public int EmployeeId { get; set; }\n\n    public DateTime StartDate { get; set; }\n\n    public DateTime EndDate { get; set; }\n\n    public LeaveType LeaveType { get; set; }\n\n    public LeaveStatus LeaveStatus { get; set; }\n\n    public List<Employee> Approvers { get; private set; }\n\n    public Employee CurrentApprover { get; set; }\n}\n\n```\n\nLets assume that the business called and added the following requirements.\n\n* There is a new Sick Leave Type\n* Sick leave can only be assigned if a sick note is attached\n\nWe might change our `LeaveEntry` as follows\n\n\n```csharp\npublic enum LeaveType\n{\n    Annual,\n    Study,\n    Sick //Change\n}\n\npublic class LeaveEntry\n{\n    public LeaveEntry()\n    {\n        this.Approvers = new List<Employee>();\n    }\n\n    public int EmployeeId { get; set; }\n\n    public DateTime StartDate { get; set; }\n\n    public DateTime EndDate { get; set; }\n\n    public LeaveType LeaveType { get; set; }\n\n    public LeaveStatus LeaveStatus { get; set; }\n\n    public List<Employee> Approvers { get; private set; }\n\n    public Employee CurrentApprover { get; set; }\n\n\tpublic byte[] Document { get; set; } //Change\n}\n\n```\n\nCan you spot the Anemia induced memory loss? Let's say a new team member joins and the first thing he sees is the `LeaveEntry` class. What is he going to think? All leave entries requires a document? He will be wrong ofcourse, but there is nothing here that points at that rule. If he does not know about the rule, he will not know to go and look for it elsewhere. This is the trap that an anemic domain sets.\n\n___\nIn a rich domain we would stick with the `LeaveEntry` as our aggregateroot. But we would move all the business rules out of our `LeaveService` into our `LeaveEntry`. We would then also decide to either make `LeaveEntry` a base class and have our `LeaveTypes` inherit from it, or compose our `LeaveEntry` with a `LeaveType` (you do this typically if the type can change). Our document will only live on our `SickLeaveType` and we will also find the validation on that type. Thus the rules and intent around sick leave is clear and complete and in one place.\n\nPlease jump over to [github](https://github.com/entelect/Dojo_DomainDrivenDesign) and have a look at this example with more rules and coded examples for both anemic and rich domain. Note that how any change in the rich domain models, have no impact on control flow. This is great because it means we can only write tests for our new classes. Also note how easy it is to test our rules without having to mock anything. This is the beauty of a rich domain.\n\nYou might notice that the Rich Domain is a bit more complex and not really less code. Modeling and modeling well is hard. But the reward can be massive.\n\nThat said there is nothing wrong with transaction script and it has its place, just like there are problems to which DDD is not the right solution. But if you tend to have more than a few rules, DDD starts to shine.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>I have been reading <a href=\"https://vaughnvernon.co/?page_id=168\">Implementing Domain Driven Design</a> by Vaughn Vernon. In it he mentions the concept of Anemia induced memory loss. Say what? Basically an anemic domain is a domain that lacks information about itself. All of its information lives in other places(like services). For you to learn about the domain, you have to know where to go look. This usually also requires some context about the decisions that the developer that wrote that piece of functionality made. As time goes by, this context gets lost, meaning all those details you had to know is either hard to find or completely lost. There is no one place to find the context thus you have to look everywhere. This is what anemia induced memory loss means.</p>\n\n<p>DDD combats this by focusing on a rich domain. A domain that knows everything about itself. The domain no longer asks the questions, it provides the answers.  If you need to know something about something, you go to that something and find it out. To achieve this however, is not an easy skill to learn. We need to learn to model a domain that makes sense to both developers and domain experts. Ubiquitous language and aggregates are the key. However it takes time and practice and guidance to really become a modeling master. </p>\n\n<p>Luckily we have a new initiative at our company called <a href=\"http://www.entelect.co.za/\">Entelect</a> Dojo, and my buddy <a href=\"https://twitter.com/eldevilliers\">Eugene</a> and myself gave a talk on domain driven design and how to start thinking \"rich domain\". We had a nice comparison of a domain implemented using <a href=\"http://martinfowler.com/eaaCatalog/transactionScript.html\">transaction script</a>(aka anemic domain) and a rich domain model. The Anemia induced memory loss is blatantly obvious so I thought I would run through the two examples. This will also give you a sense of how to start thinking rich domain.</p>\n\n<hr />\n\n<h3 id=\"firstweneedsomerequirements\">First we need some requirements.</h3>\n\n<ul>\n<li>Employees can capture Annual and Study leave.</li>\n<li>There are various rules around capturing leave.</li>\n</ul>\n\n<hr />\n\n<h3 id=\"anemicdomain\">Anemic Domain</h3>\n\n<p>Typically we will have a <code>LeaveEntry</code> poco that we use everywhere. We might also have a <code>LeaveService</code> that is responsible for control flow (mapping, validation, persistence) and business rules.</p>\n\n<pre><code class=\"csharp\">public enum LeaveType  \n{\n    Annual,\n    Study\n}\n\npublic class LeaveEntry  \n{\n    public LeaveEntry()\n    {\n        this.Approvers = new List&lt;Employee&gt;();\n    }\n\n    public int EmployeeId { get; set; }\n\n    public DateTime StartDate { get; set; }\n\n    public DateTime EndDate { get; set; }\n\n    public LeaveType LeaveType { get; set; }\n\n    public LeaveStatus LeaveStatus { get; set; }\n\n    public List&lt;Employee&gt; Approvers { get; private set; }\n\n    public Employee CurrentApprover { get; set; }\n}\n</code></pre>\n\n<p>Lets assume that the business called and added the following requirements.</p>\n\n<ul>\n<li>There is a new Sick Leave Type</li>\n<li>Sick leave can only be assigned if a sick note is attached</li>\n</ul>\n\n<p>We might change our <code>LeaveEntry</code> as follows</p>\n\n<pre><code class=\"csharp\">public enum LeaveType  \n{\n    Annual,\n    Study,\n    Sick //Change\n}\n\npublic class LeaveEntry  \n{\n    public LeaveEntry()\n    {\n        this.Approvers = new List&lt;Employee&gt;();\n    }\n\n    public int EmployeeId { get; set; }\n\n    public DateTime StartDate { get; set; }\n\n    public DateTime EndDate { get; set; }\n\n    public LeaveType LeaveType { get; set; }\n\n    public LeaveStatus LeaveStatus { get; set; }\n\n    public List&lt;Employee&gt; Approvers { get; private set; }\n\n    public Employee CurrentApprover { get; set; }\n\n    public byte[] Document { get; set; } //Change\n}\n</code></pre>\n\n<p>Can you spot the Anemia induced memory loss? Let's say a new team member joins and the first thing he sees is the <code>LeaveEntry</code> class. What is he going to think? All leave entries requires a document? He will be wrong ofcourse, but there is nothing here that points at that rule. If he does not know about the rule, he will not know to go and look for it elsewhere. This is the trap that an anemic domain sets.</p>\n\n<hr />\n\n<p>In a rich domain we would stick with the <code>LeaveEntry</code> as our aggregateroot. But we would move all the business rules out of our <code>LeaveService</code> into our <code>LeaveEntry</code>. We would then also decide to either make <code>LeaveEntry</code> a base class and have our <code>LeaveTypes</code> inherit from it, or compose our <code>LeaveEntry</code> with a <code>LeaveType</code> (you do this typically if the type can change). Our document will only live on our <code>SickLeaveType</code> and we will also find the validation on that type. Thus the rules and intent around sick leave is clear and complete and in one place.</p>\n\n<p>Please jump over to <a href=\"https://github.com/entelect/Dojo_DomainDrivenDesign\">github</a> and have a look at this example with more rules and coded examples for both anemic and rich domain. Note that how any change in the rich domain models, have no impact on control flow. This is great because it means we can only write tests for our new classes. Also note how easy it is to test our rules without having to mock anything. This is the beauty of a rich domain.</p>\n\n<p>You might notice that the Rich Domain is a bit more complex and not really less code. Modeling and modeling well is hard. But the reward can be massive.</p>\n\n<p>That said there is nothing wrong with transaction script and it has its place, just like there are problems to which DDD is not the right solution. But if you tend to have more than a few rules, DDD starts to shine.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1429202416271,"created_by":1,"updated_at":1430565531947,"updated_by":1,"published_at":1429202716593,"published_by":1},{"id":23,"uuid":"2cde7c1d-993e-4b68-bff8-16ac3d314b9b","title":"How changing my commit messages made me more productive","slug":"how-changing-my-commit-messages-made-me-more-productive","markdown":"Confession. I sucked at writing commit messages. Messages like `Fix`, `Style Things` and `Fix Again #yolo` where common place. This did not really matter much as I was working by myself at the time, but I knew I had to start building a habit of writing better commit messages. But every time I started looking on the interwebs I found suggestions to write a heading, a proper body and some foot notes. I understand where this is useful, but working mainly on line of business applications and committing often made it seem like more of a chore than anything else. \n\nThen someone at work shared this post about [semantic commit messages](http://seesparkbox.com/foundry/semantic_commit_messages).\n\n*\"Now that's something I can get behind\",* I thought to myself. Short, sweet and easy to remember. \n\nWhat really caught me off guard was that it made me a lot more productive. \n\n\n> Huh? You do it at the end how does it make you more productive?\n\nHere's what happens. Writing the prefix forces you to commit only the work related to the one thing you should be doing. Either a Feature or a Fix or a Style Change etc. So I automatically start thinking about my commit message before I start working with the code. This means that when I start working with the code, I am focused on **exactly** what needs to be done and **only** that. Then I just do it. I get it done, commit and hop on over to whatever is next.\n\nI also get a nice looking commit history that is easily readable and I leave bigger breadcrumbs for those that come after me.\n\nThis is also a great first step to eventually writing more detailed commit messages.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>\n","html":"<p>Confession. I sucked at writing commit messages. Messages like <code>Fix</code>, <code>Style Things</code> and <code>Fix Again #yolo</code> where common place. This did not really matter much as I was working by myself at the time, but I knew I had to start building a habit of writing better commit messages. But every time I started looking on the interwebs I found suggestions to write a heading, a proper body and some foot notes. I understand where this is useful, but working mainly on line of business applications and committing often made it seem like more of a chore than anything else. </p>\n\n<p>Then someone at work shared this post about <a href=\"http://seesparkbox.com/foundry/semantic_commit_messages\">semantic commit messages</a>.</p>\n\n<p><em>\"Now that's something I can get behind\",</em> I thought to myself. Short, sweet and easy to remember. </p>\n\n<p>What really caught me off guard was that it made me a lot more productive. </p>\n\n<blockquote>\n  <p>Huh? You do it at the end how does it make you more productive?</p>\n</blockquote>\n\n<p>Here's what happens. Writing the prefix forces you to commit only the work related to the one thing you should be doing. Either a Feature or a Fix or a Style Change etc. So I automatically start thinking about my commit message before I start working with the code. This means that when I start working with the code, I am focused on <strong>exactly</strong> what needs to be done and <strong>only</strong> that. Then I just do it. I get it done, commit and hop on over to whatever is next.</p>\n\n<p>I also get a nice looking commit history that is easily readable and I leave bigger breadcrumbs for those that come after me.</p>\n\n<p>This is also a great first step to eventually writing more detailed commit messages.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1430565357318,"created_by":1,"updated_at":1430842634619,"updated_by":1,"published_at":1430841283721,"published_by":1},{"id":24,"uuid":"21b1795d-02f8-4e7f-b75d-ae083e4a89b4","title":"Some Updates Yeah","slug":"some-updates-yeah","markdown":"So I have not posted a new blog post in a while, but don't fret! I have a bunch of Domain Driven Design and Clean Code content that I will get out to you in the next few month. Exciting stuff!\n\n**So why so quiet?**\n\nWell a bunch of things have been happening. And I have been creating content, just in some different places!\n\nFirst of All I am a speaker at the **[jsinsa](http://www.jsinsa.com/)** conference this coming Saturday (11 July). **jsinsa** is a fun yearly javascript conference in Johannesburg and I have the privilege of sharing my experience in building a culture of [Chatops](http://sneakycode.net/getting-started-with-chat-ops/).\n\n![jsinsa logo](http://res.cloudinary.com/dltpyggxx/image/upload/v1436376187/logo-small_s55zcc.png)\n\nAnd in some other big news I have been working on a Chatops course for **[pluralsight.com](http://www.pluralsight.com/)** due end of July. **Pluralsight** is an online training library aimed at hardcore developer training. They are great and I am super excited to work with them. My course is halfway done and I will be sure to let you know when it is out!\n\n![pluralsight logo](http://res.cloudinary.com/dltpyggxx/image/upload/v1436376187/PS_Logo_500x109_4C-1024x217_u4eepj.jpg)\n\nI have also been giving some internal Domain Driven Design training at my [company](http://www.entelect.co.za/) and have had some interesting DDD experience in my team. I will definitely be talking about it here. This includes the [Project Template](https://github.com/SneakyPeet/SimpleDDD) that I started, testing and the problems with repositories. I'm looking forward to getting these discussions going!\n\nSee you soon!\n\nPieter ","html":"<p>So I have not posted a new blog post in a while, but don't fret! I have a bunch of Domain Driven Design and Clean Code content that I will get out to you in the next few month. Exciting stuff!</p>\n\n<p><strong>So why so quiet?</strong></p>\n\n<p>Well a bunch of things have been happening. And I have been creating content, just in some different places!</p>\n\n<p>First of All I am a speaker at the <strong><a href=\"http://www.jsinsa.com/\">jsinsa</a></strong> conference this coming Saturday (11 July). <strong>jsinsa</strong> is a fun yearly javascript conference in Johannesburg and I have the privilege of sharing my experience in building a culture of <a href=\"http://sneakycode.net/getting-started-with-chat-ops/\">Chatops</a>.</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1436376187/logo-small_s55zcc.png\" alt=\"jsinsa logo\" /></p>\n\n<p>And in some other big news I have been working on a Chatops course for <strong><a href=\"http://www.pluralsight.com/\">pluralsight.com</a></strong> due end of July. <strong>Pluralsight</strong> is an online training library aimed at hardcore developer training. They are great and I am super excited to work with them. My course is halfway done and I will be sure to let you know when it is out!</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1436376187/PS_Logo_500x109_4C-1024x217_u4eepj.jpg\" alt=\"pluralsight logo\" /></p>\n\n<p>I have also been giving some internal Domain Driven Design training at my <a href=\"http://www.entelect.co.za/\">company</a> and have had some interesting DDD experience in my team. I will definitely be talking about it here. This includes the <a href=\"https://github.com/SneakyPeet/SimpleDDD\">Project Template</a> that I started, testing and the problems with repositories. I'm looking forward to getting these discussions going!</p>\n\n<p>See you soon!</p>\n\n<p>Pieter </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1436376346070,"created_by":1,"updated_at":1436376424488,"updated_by":1,"published_at":1436376424490,"published_by":1},{"id":25,"uuid":"0ebd8de8-1676-4952-9afe-2b254377d608","title":"Reflecting on Domain Driven Design","slug":"reflecting-on-domain-driven-design","markdown":"When I started blogging about DDD, I mentioned that my plan was to build up a [DDD project template](https://github.com/SneakyPeet/SimpleDDD). I wanted to do this because there are very few examples out there on how to do DDD. \n\nLooking at that Github project you will see that almost nothing has happened since its creation. \n\n> Why?\n\nThe reason why is the same reason why there are not many DDD project examples out there. DDD is not about application structure. It is not about application services, repositories, entities and value objects. Although these are important they only exist to support the application and help keep it maintainable. You can do domain driven design without using any of these.\n\nDDD is about **Ubiquitous Language**.\n\nIt's about **Bounded Context**.\n\nIt is having your software talk the language of your domain experts. It is collaborative modeling with the entire team.\n\n> How do you make a project template for this? \n\nYou don't.\n\nBut what about repositories and application services and all these things? Surely they are very important. Using these things does not mean you are doing DDD, even though they are described in the [Domain Driven Design bible](http://dddcommunity.org/book/evans_2003/). If you talk to Eric Evans today he will tell you the same. Yes I can put a bunch of these into a project template, but that is blatantly over engineering. A software product is not a bunch of layers and software concepts. It is about features that makes the users life better. These concepts exist only to support these features and should only be implemented when really required and to promote maintainability.\n\n> What does this mean? \n\nDDD is hard. It is not something you can read in a book and then implement like a design pattern. It is something to be practiced, preferably with people that have done it before. You have to do it, you have to fight with it, you have to fail and succeed. Only then it will become part of your software engineering tool belt.\n\nThis does not mean we have to stop discussing DDD. No! It should serve as motivation for discussion. In future post I will most definitely continue tackling the practical assets of DDD and I am looking forward to having these discussions with you.\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>When I started blogging about DDD, I mentioned that my plan was to build up a <a href=\"https://github.com/SneakyPeet/SimpleDDD\">DDD project template</a>. I wanted to do this because there are very few examples out there on how to do DDD. </p>\n\n<p>Looking at that Github project you will see that almost nothing has happened since its creation. </p>\n\n<blockquote>\n  <p>Why?</p>\n</blockquote>\n\n<p>The reason why is the same reason why there are not many DDD project examples out there. DDD is not about application structure. It is not about application services, repositories, entities and value objects. Although these are important they only exist to support the application and help keep it maintainable. You can do domain driven design without using any of these.</p>\n\n<p>DDD is about <strong>Ubiquitous Language</strong>.</p>\n\n<p>It's about <strong>Bounded Context</strong>.</p>\n\n<p>It is having your software talk the language of your domain experts. It is collaborative modeling with the entire team.</p>\n\n<blockquote>\n  <p>How do you make a project template for this? </p>\n</blockquote>\n\n<p>You don't.</p>\n\n<p>But what about repositories and application services and all these things? Surely they are very important. Using these things does not mean you are doing DDD, even though they are described in the <a href=\"http://dddcommunity.org/book/evans_2003/\">Domain Driven Design bible</a>. If you talk to Eric Evans today he will tell you the same. Yes I can put a bunch of these into a project template, but that is blatantly over engineering. A software product is not a bunch of layers and software concepts. It is about features that makes the users life better. These concepts exist only to support these features and should only be implemented when really required and to promote maintainability.</p>\n\n<blockquote>\n  <p>What does this mean? </p>\n</blockquote>\n\n<p>DDD is hard. It is not something you can read in a book and then implement like a design pattern. It is something to be practiced, preferably with people that have done it before. You have to do it, you have to fight with it, you have to fail and succeed. Only then it will become part of your software engineering tool belt.</p>\n\n<p>This does not mean we have to stop discussing DDD. No! It should serve as motivation for discussion. In future post I will most definitely continue tackling the practical assets of DDD and I am looking forward to having these discussions with you.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1437578316376,"created_by":1,"updated_at":1437578485934,"updated_by":1,"published_at":1437578418838,"published_by":1},{"id":26,"uuid":"58e91e55-4d9e-4cc6-a84b-5b194aabe18a","title":"What Language Does Your Application Speak","slug":"what-language-does-your-application-speak","markdown":"If you are doing Domain Driven Design (or any application with business logic for that matter), you should be talking in two languages. \n\nThe first is the **ubiquitous language**. Yes, yes I know big word. But if you have to choose one thing that makes DDD what it is, it is the ubiquitous language. Without it you are simply not doing DDD.\n\nWell what is it? In short it is the language that you and your team, and your business owner and you domain experts and clients develop together to describe the domain that you are working with. When you talk the ubiquitous language, everyone on your team knows what you are talking about. When you use it in your code, even non developers sharing your ubiquitous language will be able to look at your code and know what the context is. Your code becomes self documenting and the language outlives developers as the context is kept within the language the entire team speaks. It is the basis of the model that you develop to describe the domain. It tells you **What** your application does. Are you writing methods like update, create and delete? You are not talking the ubiquitous language. Do you have classes called manager, service or processor? You are not talking the ubiquitous language. Are you having trouble naming things? Maybe the language that you have developed is not a good representation of the domain. Maybe you have to get back together with your domain experts and talk it out. \n\nThe second is **architecture language**. This is the language of the developer. This is your controllers, your factories, your strategies. It is the language you use to describe how your applications fits together. It tells you **How** your applications does it's job. \n\nThe goal of these two languages is to promote maintainability and help you solve the customers problem well.\n\nThese languages should not be mixed, however they will meet at certain points in your application that you should define well. Here is a good example of such a boundary\n\n```csharp\npublic class ApplyForLeaveCommandHandler : ICommandHandler<ApplyForLeave>\n{\n    private readonly IRepository repo;\n    public ApplyForLeaveCommandHandler(IRepository repo)\n    {\n        this.repo = repo;\n    }\n\n    public void Handle(ApplyForLeave cmd)\n    {\n        var employee = this.repo.GetById<Employee>(cmd.EmployeeId);\n        var leaveEntry = employee.ApplyForLeave(cmd.LeaveId, cmd.StartDate, cmd.EndDate);\n        this.repo.Add(leaveEntry);\n    }\n}\n```\n\nLooking at this class and the words `CommandHandler` and `Repository`, you might see the resemblance of the command pattern or even event sourcing. You see that it is handling application flow. This class is clearly talking architecture.\n\n`ApplyForLeave` and `employee.ApplyForLeave` is your ubiquitous language and to understand your business logic, you delve into these classes and methods. When your rules change, your app flow does not. When your architecture changes, your rules are unaffected. Your architecture knows how to talk the ubiquitous language, but has no idea how your business logic is actually implemented. Your domain should only talk ubiquitous language, and should mostly be totally unaware of architecture language.\n\nDoes your applications need to learn a new language?\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>If you are doing Domain Driven Design (or any application with business logic for that matter), you should be talking in two languages. </p>\n\n<p>The first is the <strong>ubiquitous language</strong>. Yes, yes I know big word. But if you have to choose one thing that makes DDD what it is, it is the ubiquitous language. Without it you are simply not doing DDD.</p>\n\n<p>Well what is it? In short it is the language that you and your team, and your business owner and you domain experts and clients develop together to describe the domain that you are working with. When you talk the ubiquitous language, everyone on your team knows what you are talking about. When you use it in your code, even non developers sharing your ubiquitous language will be able to look at your code and know what the context is. Your code becomes self documenting and the language outlives developers as the context is kept within the language the entire team speaks. It is the basis of the model that you develop to describe the domain. It tells you <strong>What</strong> your application does. Are you writing methods like update, create and delete? You are not talking the ubiquitous language. Do you have classes called manager, service or processor? You are not talking the ubiquitous language. Are you having trouble naming things? Maybe the language that you have developed is not a good representation of the domain. Maybe you have to get back together with your domain experts and talk it out. </p>\n\n<p>The second is <strong>architecture language</strong>. This is the language of the developer. This is your controllers, your factories, your strategies. It is the language you use to describe how your applications fits together. It tells you <strong>How</strong> your applications does it's job. </p>\n\n<p>The goal of these two languages is to promote maintainability and help you solve the customers problem well.</p>\n\n<p>These languages should not be mixed, however they will meet at certain points in your application that you should define well. Here is a good example of such a boundary</p>\n\n<pre><code class=\"csharp\">public class ApplyForLeaveCommandHandler : ICommandHandler&lt;ApplyForLeave&gt;  \n{\n    private readonly IRepository repo;\n    public ApplyForLeaveCommandHandler(IRepository repo)\n    {\n        this.repo = repo;\n    }\n\n    public void Handle(ApplyForLeave cmd)\n    {\n        var employee = this.repo.GetById&lt;Employee&gt;(cmd.EmployeeId);\n        var leaveEntry = employee.ApplyForLeave(cmd.LeaveId, cmd.StartDate, cmd.EndDate);\n        this.repo.Add(leaveEntry);\n    }\n}\n</code></pre>\n\n<p>Looking at this class and the words <code>CommandHandler</code> and <code>Repository</code>, you might see the resemblance of the command pattern or even event sourcing. You see that it is handling application flow. This class is clearly talking architecture.</p>\n\n<p><code>ApplyForLeave</code> and <code>employee.ApplyForLeave</code> is your ubiquitous language and to understand your business logic, you delve into these classes and methods. When your rules change, your app flow does not. When your architecture changes, your rules are unaffected. Your architecture knows how to talk the ubiquitous language, but has no idea how your business logic is actually implemented. Your domain should only talk ubiquitous language, and should mostly be totally unaware of architecture language.</p>\n\n<p>Does your applications need to learn a new language?</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1440019811329,"created_by":1,"updated_at":1440020174731,"updated_by":1,"published_at":1440019879481,"published_by":1},{"id":27,"uuid":"8633e602-4f2c-42c3-b550-46c672a78630","title":"My First Pluralsight Course Went Live","slug":"my-first-pluralsight-course-went-live","markdown":"**Fact:** I have not been blogging as often as I would have liked\n\n**Fact:** This is because I have been working on my ***[Getting Started With ChatOps](http://www.pluralsight.com/courses/chatops-getting-started)*** Pluralsight course. \n\nThis course is a road map to getting a team up and running with ChatOps. I help you discover the benefits of ChatOps and how to get your team to actively participate in a ChatOps culture. I show you how to place information and everyday tasks in the middle of your conversation and turn your chat room into the command line for your team. Go Go Watch It Now!\n\n**[Pluralsight](http://www.pluralsight.com)** is an online video library focused on hard core developer training. They are great go check them out.","html":"<p><strong>Fact:</strong> I have not been blogging as often as I would have liked</p>\n\n<p><strong>Fact:</strong> This is because I have been working on my <strong><em><a href=\"http://www.pluralsight.com/courses/chatops-getting-started\">Getting Started With ChatOps</a></em></strong> Pluralsight course. </p>\n\n<p>This course is a road map to getting a team up and running with ChatOps. I help you discover the benefits of ChatOps and how to get your team to actively participate in a ChatOps culture. I show you how to place information and everyday tasks in the middle of your conversation and turn your chat room into the command line for your team. Go Go Watch It Now!</p>\n\n<p><strong><a href=\"http://www.pluralsight.com\">Pluralsight</a></strong> is an online video library focused on hard core developer training. They are great go check them out.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1442380869898,"created_by":1,"updated_at":1442381700450,"updated_by":1,"published_at":1442381700452,"published_by":1},{"id":28,"uuid":"4c455612-9f84-431f-b3fd-1e0f498eb3dc","title":"Better Test Documentation","slug":"better-test-documentation","markdown":"Let's look at some tests.\n\n![Typical Test Folders](http://res.cloudinary.com/dltpyggxx/image/upload/v1453703519/1_dtodo7.png)\n\nOk, so we can assume there is some `User` and `Controller` functionality. But to really know more we have to dig deeper.\n\n![User Tests](http://res.cloudinary.com/dltpyggxx/image/upload/v1453703517/2_jkvieq.png)\n\nLooking at the `User` test folder, have we gained more insight?. It is only when diving into `UserTests` that we get to see what our functionality really is. And here we see the same old same old:\n\n* A class, testing many different (and separate) things regarding `Users`.\n* Long tests names all starting with `Given_Something_Then`.\n\nI am going to make a statement: ***Well written tests serves as documentation***.\n\nDuplication and not adhering to the Single Responsibility Principle, makes our tests hard to read, hard to maintain and we have to dig around in the code to figure out what is actually going on.\n\nHow can we make this better? By being specific! We can use namespaces/folders to extract duplication and serve as an overview of functionality. By following the Single Responsibility Principle we can advance our initial understanding by having well named files that point to single area's of functionality.\n\nLet's look at an example.\n\n![Content Tests](http://res.cloudinary.com/dltpyggxx/image/upload/v1453703517/3_omiqib.png)\n\nRight of the bat we can see that we are dealing with content and more specifically content creation and publishing.\n\n![Content Tests Folders](http://res.cloudinary.com/dltpyggxx/image/upload/v1453703518/4_tpx6fa.png)\n\nEven more functionality is exposed by opening these folders. And when finally looking at the actual test classes, a very good overview what our code should actually be doing is gained. \n\n![Content Tests Folders](http://res.cloudinary.com/dltpyggxx/image/upload/v1453703518/5_aqy0rw.png)\n\nUp to this point we have not read any code. This is much better than `ContentTests` and `ContentFactoryTests` would ever be. When reading the actual code, some attention needs to be paid to the namespace and class name to get all the info regarding the tests, but this is minor to the readability gained on a folder level.\n\n\n```csharp\n\n\tnamespace App.Tests.ContentCreation.WhenUpdatingContent\n\t{\n\t    [TestFixture]\n\t    public class ThrowExceptionIf\n\t    {\n\t\n\t        [Test]\n\t        [ExpectedException(typeof(LogicException))]\n\t        public void BrowsableIdentifierNotSet()\n\t        {\n\t            \n\t        }\n\t\n\t        [Test]\n\t        [ExpectedException(typeof(LogicException))]\n\t        public void BrowsableDisplayNameNotSet()\n\t        {\n\t            \n\t        }\n\t    }\n\t}\n\n```\n\nPersonally I think this is great, but I would love to hear your comments, suggestions and improvements! \n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>Let's look at some tests.</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1453703519/1_dtodo7.png\" alt=\"Typical Test Folders\" /></p>\n\n<p>Ok, so we can assume there is some <code>User</code> and <code>Controller</code> functionality. But to really know more we have to dig deeper.</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1453703517/2_jkvieq.png\" alt=\"User Tests\" /></p>\n\n<p>Looking at the <code>User</code> test folder, have we gained more insight?. It is only when diving into <code>UserTests</code> that we get to see what our functionality really is. And here we see the same old same old:</p>\n\n<ul>\n<li>A class, testing many different (and separate) things regarding <code>Users</code>.</li>\n<li>Long tests names all starting with <code>Given_Something_Then</code>.</li>\n</ul>\n\n<p>I am going to make a statement: <strong><em>Well written tests serves as documentation</em></strong>.</p>\n\n<p>Duplication and not adhering to the Single Responsibility Principle, makes our tests hard to read, hard to maintain and we have to dig around in the code to figure out what is actually going on.</p>\n\n<p>How can we make this better? By being specific! We can use namespaces/folders to extract duplication and serve as an overview of functionality. By following the Single Responsibility Principle we can advance our initial understanding by having well named files that point to single area's of functionality.</p>\n\n<p>Let's look at an example.</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1453703517/3_omiqib.png\" alt=\"Content Tests\" /></p>\n\n<p>Right of the bat we can see that we are dealing with content and more specifically content creation and publishing.</p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1453703518/4_tpx6fa.png\" alt=\"Content Tests Folders\" /></p>\n\n<p>Even more functionality is exposed by opening these folders. And when finally looking at the actual test classes, a very good overview what our code should actually be doing is gained. </p>\n\n<p><img src=\"http://res.cloudinary.com/dltpyggxx/image/upload/v1453703518/5_aqy0rw.png\" alt=\"Content Tests Folders\" /></p>\n\n<p>Up to this point we have not read any code. This is much better than <code>ContentTests</code> and <code>ContentFactoryTests</code> would ever be. When reading the actual code, some attention needs to be paid to the namespace and class name to get all the info regarding the tests, but this is minor to the readability gained on a folder level.</p>\n\n<pre><code class=\"csharp\">    namespace App.Tests.ContentCreation.WhenUpdatingContent\n    {\n        [TestFixture]\n        public class ThrowExceptionIf\n        {\n\n            [Test]\n            [ExpectedException(typeof(LogicException))]\n            public void BrowsableIdentifierNotSet()\n            {\n\n            }\n\n            [Test]\n            [ExpectedException(typeof(LogicException))]\n            public void BrowsableDisplayNameNotSet()\n            {\n\n            }\n        }\n    }\n</code></pre>\n\n<p>Personally I think this is great, but I would love to hear your comments, suggestions and improvements! </p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1453704833025,"created_by":1,"updated_at":1453705033058,"updated_by":1,"published_at":1453704982738,"published_by":1},{"id":29,"uuid":"6f56960b-e385-47d2-9f11-35d126a27f94","title":"Delayed Dependency Resolution the Right Way","slug":"delayed-dependency-resolving-the-right-way","markdown":"I have been playing around with CQRS/Event Sourcing and using lightweight, immutable command messages to trigger actions in my application. The great thing about this is that you can specify a single point of entry into your application by using a very simple interface. \n\n```csharp\n\n\tpublic interface IApplication\n\t{\n\t\tvoid Execute<T>(T command) where T : ICommand;\n\t}\n```\nThis means that every time you want to expose a new actionable feature, you just provide the client with a simple command object.\n\n```csharp\n\n\t// this is F#\n\ttype HireEmployee = {\n\t    EmployeeId: Guid;\n\t    Name: String;\n\t    HireDate: DateTime;\n\t} with interface ICommand\n\n```\n(By the way I like implementing my command and event messages in f# because f# has structural equality and immutability by default which means I do not have to write constructor boilerplate and override equality methods.)\n\nNo more creating a bunch of Application Interfaces that your client needs to consume. You just add the appropriate command handler implementation inside of your application.\n\n```csharp\n\n\tpublic class HireEmployeeHandler : ICommandHandler<HireEmployee>\n\t{\n\t\tpublic void Handle(HireEmployee command) {...}\n\t}\n```\n\n**There is however a tiny issue with IoC container wireup**. Typically we are used to calling resolve on our container once at the entry point of our system. Our container will then inject all our dependencies and bob's your uncle! However can you spot the problem with our above example? By the time we need to figure out what CommandHandler to use, we have already resolved our dependencies. This means that we need to explicitly resolve the dependencies for our CommandHandler again. \n\nSimple you say! I'll just pass my container into the code that resolves my command handler.\n\n```csharp\n\n\tclass CommandDispatcher : ICommandDispatcher\n    {\n        private readonly IContainer container;\n\n        public CommandDispatcher(IContainer container)\n        {\n            this.container = container;\n        }\n\n        public void Send<T>(T command) where T : ICommand\n        {\n            var handler = this.container.Resolve<T>();\n            handler.Handle(command);\n        }\n    }\n\n```\n\n**DO NOT DO THIS!**\n\nThe clean code god's will smite you for introducing the concept of a container into your domain and doing service location. Your IoC container should sit on the outermost layer of your application and assist you in building up complex dependencies. Other than container wire up you should only be calling `container.Resolve()` in once place. If your application is small you can ask yourself *\"do I even need an IoC container?\"*. Remember that not having an IoC container does not mean that you are not doing Dependency Injection. Because your IoC does magic to make your life easy, it does not mean you should abuse it by building up huge dependency trees that go 10 levels deep and injecting to many dependencies.\n\n`#rant` Let's get back to solving the problem. A better solution would be to do something like this.\n\n```csharp\n\n\tclass CommandDispatcher : ICommandDispatcher\n    {\n        private readonly ICommandHandlerFactory factory;\n\n        public CommandDispatcher(ICommandHandlerFactory factory)\n        {\n            this.factory = factory;\n        }\n\n        public void Send<T>(T command) where T : ICommand\n        {\n            var handler = this.factory.Create(command);\n            handler.Handle(command);\n            this.factory.Destroy(handler); //you have to explicitly manage the life cycle of your handler\n        }\n    }\n\n\tpublic interface ICommandHandlerFactory\n    {\n        ICommandHandler<T> Create<T>(T command) where T : ICommand;\n        void Destroy(object handler);\n    }\n```\n\nHow is this different? First of all you are expressing your needs without polluting your domain. If you ever decide to chuck out your IoC container for a different one, your domain would be unaffected. You would not have to change a single line of code in your domain. The only thing that you would have to do is as part of your container wireup you would need to actually implement `ICommandHandlerFactory`. Because you are doing DI, the implementation does not have to sit inside your domain, but can live outside of it alongside your container.\n\nIf you are using [Castle Windsor](https://github.com/castleproject/Windsor) you are in luck. They provide a [Typed Factory Facility](https://github.com/castleproject/Windsor/blob/master/docs/typed-factory-facility.md) which means you do not even have to implement `ICommandHandlerFactory`! You just need initialize the factory in you container wireup and bob is your uncle again!\n\n```csharp\n\n\tcontainer.AddFacility<TypedFactoryFacility>();\n\n    container.Register(\n    \tComponent.For<ICommandHandlerFactory>()\n        \t.AsFactory()\n    );\n\n```\n\n**Nifty!** Remember kids, Inject Responsibly!\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p>I have been playing around with CQRS/Event Sourcing and using lightweight, immutable command messages to trigger actions in my application. The great thing about this is that you can specify a single point of entry into your application by using a very simple interface. </p>\n\n<pre><code class=\"csharp\">    public interface IApplication\n    {\n        void Execute&lt;T&gt;(T command) where T : ICommand;\n    }\n</code></pre>\n\n<p>This means that every time you want to expose a new actionable feature, you just provide the client with a simple command object.</p>\n\n<pre><code class=\"csharp\">    // this is F#\n    type HireEmployee = {\n        EmployeeId: Guid;\n        Name: String;\n        HireDate: DateTime;\n    } with interface ICommand\n</code></pre>\n\n<p>(By the way I like implementing my command and event messages in f# because f# has structural equality and immutability by default which means I do not have to write constructor boilerplate and override equality methods.)</p>\n\n<p>No more creating a bunch of Application Interfaces that your client needs to consume. You just add the appropriate command handler implementation inside of your application.</p>\n\n<pre><code class=\"csharp\">    public class HireEmployeeHandler : ICommandHandler&lt;HireEmployee&gt;\n    {\n        public void Handle(HireEmployee command) {...}\n    }\n</code></pre>\n\n<p><strong>There is however a tiny issue with IoC container wireup</strong>. Typically we are used to calling resolve on our container once at the entry point of our system. Our container will then inject all our dependencies and bob's your uncle! However can you spot the problem with our above example? By the time we need to figure out what CommandHandler to use, we have already resolved our dependencies. This means that we need to explicitly resolve the dependencies for our CommandHandler again. </p>\n\n<p>Simple you say! I'll just pass my container into the code that resolves my command handler.</p>\n\n<pre><code class=\"csharp\">    class CommandDispatcher : ICommandDispatcher\n    {\n        private readonly IContainer container;\n\n        public CommandDispatcher(IContainer container)\n        {\n            this.container = container;\n        }\n\n        public void Send&lt;T&gt;(T command) where T : ICommand\n        {\n            var handler = this.container.Resolve&lt;T&gt;();\n            handler.Handle(command);\n        }\n    }\n</code></pre>\n\n<p><strong>DO NOT DO THIS!</strong></p>\n\n<p>The clean code god's will smite you for introducing the concept of a container into your domain and doing service location. Your IoC container should sit on the outermost layer of your application and assist you in building up complex dependencies. Other than container wire up you should only be calling <code>container.Resolve()</code> in once place. If your application is small you can ask yourself <em>\"do I even need an IoC container?\"</em>. Remember that not having an IoC container does not mean that you are not doing Dependency Injection. Because your IoC does magic to make your life easy, it does not mean you should abuse it by building up huge dependency trees that go 10 levels deep and injecting to many dependencies.</p>\n\n<p><code>#rant</code> Let's get back to solving the problem. A better solution would be to do something like this.</p>\n\n<pre><code class=\"csharp\">    class CommandDispatcher : ICommandDispatcher\n    {\n        private readonly ICommandHandlerFactory factory;\n\n        public CommandDispatcher(ICommandHandlerFactory factory)\n        {\n            this.factory = factory;\n        }\n\n        public void Send&lt;T&gt;(T command) where T : ICommand\n        {\n            var handler = this.factory.Create(command);\n            handler.Handle(command);\n            this.factory.Destroy(handler); //you have to explicitly manage the life cycle of your handler\n        }\n    }\n\n    public interface ICommandHandlerFactory\n    {\n        ICommandHandler&lt;T&gt; Create&lt;T&gt;(T command) where T : ICommand;\n        void Destroy(object handler);\n    }\n</code></pre>\n\n<p>How is this different? First of all you are expressing your needs without polluting your domain. If you ever decide to chuck out your IoC container for a different one, your domain would be unaffected. You would not have to change a single line of code in your domain. The only thing that you would have to do is as part of your container wireup you would need to actually implement <code>ICommandHandlerFactory</code>. Because you are doing DI, the implementation does not have to sit inside your domain, but can live outside of it alongside your container.</p>\n\n<p>If you are using <a href=\"https://github.com/castleproject/Windsor\">Castle Windsor</a> you are in luck. They provide a <a href=\"https://github.com/castleproject/Windsor/blob/master/docs/typed-factory-facility.md\">Typed Factory Facility</a> which means you do not even have to implement <code>ICommandHandlerFactory</code>! You just need initialize the factory in you container wireup and bob is your uncle again!</p>\n\n<pre><code class=\"csharp\">    container.AddFacility&lt;TypedFactoryFacility&gt;();\n\n    container.Register(\n        Component.For&lt;ICommandHandlerFactory&gt;()\n            .AsFactory()\n    );\n</code></pre>\n\n<p><strong>Nifty!</strong> Remember kids, Inject Responsibly!</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1456775396306,"created_by":1,"updated_at":1456821727001,"updated_by":1,"published_at":1456807287836,"published_by":1},{"id":30,"uuid":"de28f266-855c-44c3-9056-013ed39fe59c","title":"Event Sourcing and Battling Accidental Complexity (DevDay2016)","slug":"event-sourcing-and-battling-accidental-complexity-devday2016","markdown":"\nFor the last year I have been delving into Event Sourcing in my free time. From total ignorance to complete understanding, back to not having an idea what is going on and then epiphany after epiphany, it has been a fun, eye opening journey. It is such a different way of thinking, and ties in so beautifully with Domain Driven Design, CQRS and Clean Code. It solves so many problems that I did not even realize I had. It simplifies implementation, highlights the application features, separates concerns, provide flexibility, maintainability, scalability and many more things. \n\n>And for the life of me **I Cannot Understand Why We Have Not Been Doing It!**\n\nToday, Friday 22, 2016, I am talking about 3 common choices that we as developers make on a daily basis that adds accidental complexity into our applications, and how we can leverage event sourcing to combat these. I am so exited! `#ShareAllTheThings!`\n\nIn prep for the talk I have placed my current thoughts and understanding of event sourcing into a bundle of information, accompanied by a simple application showing how one could go about implementing event sourcing. By no means does it cover everything, but I believe it will serve as a great starting point for anyone wanting to checkout event sourcing.\n\nJump over and have a look at [Easy Event Sourcing](https://github.com/SneakyPeet/EasyEventSourcing). Please share if you like it and please help me where I am getting things wrong. Together we can be better.\n\nFor those interested in the talk you can [find my slides here](http://www.slideshare.net/PieterKoornhof/event-sourcing-and-why-it-is-a-good-choice).\n\nIf you want to learn more about Event Sourcing and being awesome in general then [go here immediately](https://www.youtube.com/results?search_query=greg+young).\n\n![Event Sourcing](https://github.com/SneakyPeet/EasyEventSourcing/raw/master/Overview.PNG)\n","html":"<p>For the last year I have been delving into Event Sourcing in my free time. From total ignorance to complete understanding, back to not having an idea what is going on and then epiphany after epiphany, it has been a fun, eye opening journey. It is such a different way of thinking, and ties in so beautifully with Domain Driven Design, CQRS and Clean Code. It solves so many problems that I did not even realize I had. It simplifies implementation, highlights the application features, separates concerns, provide flexibility, maintainability, scalability and many more things. </p>\n\n<blockquote>\n  <p>And for the life of me <strong>I Cannot Understand Why We Have Not Been Doing It!</strong></p>\n</blockquote>\n\n<p>Today, Friday 22, 2016, I am talking about 3 common choices that we as developers make on a daily basis that adds accidental complexity into our applications, and how we can leverage event sourcing to combat these. I am so exited! <code>#ShareAllTheThings!</code></p>\n\n<p>In prep for the talk I have placed my current thoughts and understanding of event sourcing into a bundle of information, accompanied by a simple application showing how one could go about implementing event sourcing. By no means does it cover everything, but I believe it will serve as a great starting point for anyone wanting to checkout event sourcing.</p>\n\n<p>Jump over and have a look at <a href=\"https://github.com/SneakyPeet/EasyEventSourcing\">Easy Event Sourcing</a>. Please share if you like it and please help me where I am getting things wrong. Together we can be better.</p>\n\n<p>For those interested in the talk you can <a href=\"http://www.slideshare.net/PieterKoornhof/event-sourcing-and-why-it-is-a-good-choice\">find my slides here</a>.</p>\n\n<p>If you want to learn more about Event Sourcing and being awesome in general then <a href=\"https://www.youtube.com/results?search_query=greg+young\">go here immediately</a>.</p>\n\n<p><img src=\"https://github.com/SneakyPeet/EasyEventSourcing/raw/master/Overview.PNG\" alt=\"Event Sourcing\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1461265130827,"created_by":1,"updated_at":1461319009933,"updated_by":1,"published_at":1461267087515,"published_by":1},{"id":31,"uuid":"2080f60e-a956-406e-bddd-3d52811345ee","title":"Database Rant","slug":"database-rant","markdown":"**What is the primary purpose of the database?**\n\nI won't blame you for saying data storage. In most software projects it is the place where we store our data. I will however tell you that you are wrong. \n\n**Data storage is not the primary purpose of the database**\n\nIf you want to just store data, why add the overhead of a database? Why not just save your data directly on the file system. \n\n`My client wants an application! Applications generate data, therefore we must have a database! We will use SQL cause it is what we know! Now that we know how we will do it, let's ask the client what his problem is.`\n\nWhat is the real problem here? Why is blatantly choosing a relational database based on the perception that we are writing relational data wrong? It is wrong because data storage is not the problem that databases solve. Why not just store everything in a large json file?\n\n**Because it is hard to query!**\n\nAnd in that statement lies the true purpose of your database. It is not about storage. It is about data consumption. Storage is an implementation detail. Your database stores your data in a certain state, so you can query that state in a specific way. Why choose relational over document or graph over search engine? Because each one is good at a different type of query (And typically the others are not good at that type of query). Thus we should stop choosing databases because we think they fit a storage model. We should choose them based on the query problems we have. Do I need to just read blobs of data or do I have olap operations or do I want to understand how people are related to each other (or do I have all of these)?\n\nI'll concede that databases are typically damn good at storing data, providing solutions around problems faced when dealing with large amounts of data etc. There are also valid arguments for using tools that you know and understand. But these are not reasons to blatantly choose the wrong tools. We as developers need to understand the trade-offs. Understand the complexity that we introduce when choosing a database that does not fit our query model. Sometimes it is justified and sometimes not. What is important is that we make informed decisions based on our understanding of the problems we face, utilizing the knowledge we have as software engineers. If you feel you don't have the knowledge it is time to level up (or defer those decisions to those with the knowledge). \n\nNote: If you are at the start of an application and you are unsure what your queries are going to look like, then slap on an in memory repo, write some code and once you get a feel for what you are dealing with, swap out the in memory repo with the correct type of database. You will soon find that it takes a lot less time to add a database implementation later in the dev life cycle than it is to fight with the wrong implementation.\n\n\n<a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a>","html":"<p><strong>What is the primary purpose of the database?</strong></p>\n\n<p>I won't blame you for saying data storage. In most software projects it is the place where we store our data. I will however tell you that you are wrong. </p>\n\n<p><strong>Data storage is not the primary purpose of the database</strong></p>\n\n<p>If you want to just store data, why add the overhead of a database? Why not just save your data directly on the file system. </p>\n\n<p><code>My client wants an application! Applications generate data, therefore we must have a database! We will use SQL cause it is what we know! Now that we know how we will do it, let's ask the client what his problem is.</code></p>\n\n<p>What is the real problem here? Why is blatantly choosing a relational database based on the perception that we are writing relational data wrong? It is wrong because data storage is not the problem that databases solve. Why not just store everything in a large json file?</p>\n\n<p><strong>Because it is hard to query!</strong></p>\n\n<p>And in that statement lies the true purpose of your database. It is not about storage. It is about data consumption. Storage is an implementation detail. Your database stores your data in a certain state, so you can query that state in a specific way. Why choose relational over document or graph over search engine? Because each one is good at a different type of query (And typically the others are not good at that type of query). Thus we should stop choosing databases because we think they fit a storage model. We should choose them based on the query problems we have. Do I need to just read blobs of data or do I have olap operations or do I want to understand how people are related to each other (or do I have all of these)?</p>\n\n<p>I'll concede that databases are typically damn good at storing data, providing solutions around problems faced when dealing with large amounts of data etc. There are also valid arguments for using tools that you know and understand. But these are not reasons to blatantly choose the wrong tools. We as developers need to understand the trade-offs. Understand the complexity that we introduce when choosing a database that does not fit our query model. Sometimes it is justified and sometimes not. What is important is that we make informed decisions based on our understanding of the problems we face, utilizing the knowledge we have as software engineers. If you feel you don't have the knowledge it is time to level up (or defer those decisions to those with the knowledge). </p>\n\n<p>Note: If you are at the start of an application and you are unsure what your queries are going to look like, then slap on an in memory repo, write some code and once you get a feel for what you are dealing with, swap out the in memory repo with the correct type of database. You will soon find that it takes a lot less time to add a database implementation later in the dev life cycle than it is to fight with the wrong implementation.</p>\n\n<p><a href=\"http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=8804440\" rel=\"tag\" style=\"display:none\">CodeProject</a></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1462391132177,"created_by":1,"updated_at":1470908795622,"updated_by":1,"published_at":1462391680355,"published_by":1}],"users":[{"id":1,"uuid":"389be067-bf9d-49f8-891f-ca4e235ed402","name":"Pieter Koornhof","slug":"pieter","password":"$2a$10$6dlcfj2ccsqWx3rDzUODy.Y8Z/ElK808ock9I6eHhVegRKfZJQznG","email":"koornhof.pieter@gmail.com","image":null,"cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1504590272343,"created_at":1420711400922,"created_by":1,"updated_at":1504590272343,"updated_by":1},{"id":2,"uuid":"2b8d9598-de0b-455e-bd94-7fb5f14114e3","name":"decarvalhocarmen","slug":"decarvalhocarmen","password":"$2a$10$IwzxJiSpnfoeYS/FWbVlHOxPjV8sJW/kKQumTyKuoceKKcQssokmS","email":"decarvalhocarmen@gmail.com","image":null,"cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"invited","language":"en_US","meta_title":null,"meta_description":null,"last_login":null,"created_at":1420983096440,"created_by":1,"updated_at":1420983096440,"updated_by":1}],"roles":[{"id":1,"uuid":"337276d0-5f91-461d-853f-3f918a0accf1","name":"Administrator","description":"Administrators","created_at":1420711399736,"created_by":1,"updated_at":1420711399736,"updated_by":1},{"id":2,"uuid":"b7c2f114-8639-4f78-87db-8b946ab3c3d3","name":"Editor","description":"Editors","created_at":1420711399737,"created_by":1,"updated_at":1420711399737,"updated_by":1},{"id":3,"uuid":"f760f576-0b2f-40c9-a55b-f7c764299cfa","name":"Author","description":"Authors","created_at":1420711399737,"created_by":1,"updated_at":1420711399737,"updated_by":1},{"id":4,"uuid":"4852b597-013b-488c-acd2-e47ba0f2946d","name":"Owner","description":"Blog Owner","created_at":1420711399737,"created_by":1,"updated_at":1420711399737,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1},{"id":2,"role_id":3,"user_id":2}],"permissions":[{"id":1,"uuid":"c612543c-501b-492c-9d55-0f5308b79006","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1420711399859,"created_by":1,"updated_at":1420711399859,"updated_by":1},{"id":2,"uuid":"c0ab91ab-7ab0-4dbd-8af5-189b099cfe68","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1420711399864,"created_by":1,"updated_at":1420711399864,"updated_by":1},{"id":3,"uuid":"37f123a6-27c7-46d9-a599-051007b2b24d","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1420711399868,"created_by":1,"updated_at":1420711399868,"updated_by":1},{"id":4,"uuid":"fc0bdeb3-13ae-428f-8a84-71fe11bb83da","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1420711399871,"created_by":1,"updated_at":1420711399871,"updated_by":1},{"id":5,"uuid":"be22de2d-c858-4405-9cf6-c783d266e0e0","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1420711399878,"created_by":1,"updated_at":1420711399878,"updated_by":1},{"id":6,"uuid":"ee44dda0-aa87-4049-95b8-66c67d1dafb4","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1420711399890,"created_by":1,"updated_at":1420711399890,"updated_by":1},{"id":7,"uuid":"b229bd64-ff09-4934-9cc6-baec62696cd1","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1420711399899,"created_by":1,"updated_at":1420711399899,"updated_by":1},{"id":8,"uuid":"0a635c37-d8c1-4d89-9d74-d9a37be1ec6a","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1420711399903,"created_by":1,"updated_at":1420711399903,"updated_by":1},{"id":9,"uuid":"2c531cab-ea6b-41cd-9fc5-4f0edea14a76","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1420711399911,"created_by":1,"updated_at":1420711399911,"updated_by":1},{"id":10,"uuid":"0d2d1cca-11f6-40b9-81d0-69e8e15f3def","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1420711399915,"created_by":1,"updated_at":1420711399915,"updated_by":1},{"id":11,"uuid":"7fad73c2-bc41-4092-99e0-51fbff52d3ad","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1420711399919,"created_by":1,"updated_at":1420711399919,"updated_by":1},{"id":12,"uuid":"122e6e56-6374-4524-a82a-0c6f25f9f0a3","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1420711399922,"created_by":1,"updated_at":1420711399922,"updated_by":1},{"id":13,"uuid":"8614dab7-9bef-46b4-89c2-decaa22fe866","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1420711399927,"created_by":1,"updated_at":1420711399927,"updated_by":1},{"id":14,"uuid":"acb9dcee-8e18-4ebb-ba1f-d23b0cc761e1","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1420711399930,"created_by":1,"updated_at":1420711399930,"updated_by":1},{"id":15,"uuid":"c242047a-fa95-4d19-a787-32820689884a","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1420711399935,"created_by":1,"updated_at":1420711399935,"updated_by":1},{"id":16,"uuid":"ebc36de1-026d-4124-921b-8f3287f79ea4","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1420711399943,"created_by":1,"updated_at":1420711399943,"updated_by":1},{"id":17,"uuid":"96f14061-59a1-49b3-a95a-e7c0847c8633","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1420711399949,"created_by":1,"updated_at":1420711399949,"updated_by":1},{"id":18,"uuid":"0dc0db5d-65d0-4828-8f4e-d103ee710287","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1420711399954,"created_by":1,"updated_at":1420711399954,"updated_by":1},{"id":19,"uuid":"d8c7c633-5f2b-4cf2-af4e-fb2576db8ed0","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1420711399960,"created_by":1,"updated_at":1420711399960,"updated_by":1},{"id":20,"uuid":"31e7d1bd-ffdf-4f59-8648-729b8e911193","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1420711399967,"created_by":1,"updated_at":1420711399967,"updated_by":1},{"id":21,"uuid":"d78e2bf8-a294-4789-8915-17fa6147eb70","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1420711399970,"created_by":1,"updated_at":1420711399970,"updated_by":1},{"id":22,"uuid":"a27b6605-e8b3-4409-a811-626eb43627f5","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1420711399990,"created_by":1,"updated_at":1420711399990,"updated_by":1},{"id":23,"uuid":"3abab160-61a3-4876-bbc4-f5d977dcf42d","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1420711399995,"created_by":1,"updated_at":1420711399995,"updated_by":1},{"id":24,"uuid":"a9f957da-8a53-492c-9db1-a6ff70d0e71e","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1420711400000,"created_by":1,"updated_at":1420711400000,"updated_by":1},{"id":25,"uuid":"d69bdd13-e877-4705-9328-97d2276f114a","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1420711400003,"created_by":1,"updated_at":1420711400003,"updated_by":1},{"id":26,"uuid":"674b27a4-dd48-40ea-a246-4ba99fa2f81b","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1420711400008,"created_by":1,"updated_at":1420711400008,"updated_by":1},{"id":27,"uuid":"bd4156b8-d8ac-4417-ae37-fcd34194dafd","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1420711400012,"created_by":1,"updated_at":1420711400012,"updated_by":1},{"id":28,"uuid":"e6c40a32-fb6b-4235-b972-73f57a66444a","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1420711400016,"created_by":1,"updated_at":1420711400016,"updated_by":1},{"id":29,"uuid":"ee42f76c-2bf3-4411-934f-5896a7fe94b6","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1420711400020,"created_by":1,"updated_at":1420711400020,"updated_by":1},{"id":30,"uuid":"629c4055-b731-48cf-b329-7cba7566f7f1","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1420711400024,"created_by":1,"updated_at":1420711400024,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"897755ed-cc3b-4f9d-bebf-bf95e2be4c73","key":"databaseVersion","value":"003","type":"core","created_at":1420711400939,"created_by":1,"updated_at":1420711400939,"updated_by":1},{"id":2,"uuid":"de69c1d5-18f8-4681-87f8-d92d88fd976e","key":"dbHash","value":"4fe814e7-a851-4b58-ad09-93e0694ca88a","type":"core","created_at":1420711400946,"created_by":1,"updated_at":1420711401063,"updated_by":1},{"id":3,"uuid":"108290cc-6da6-488a-a8ee-665a0dd1396b","key":"nextUpdateCheck","value":"1504676654","type":"core","created_at":1420711400947,"created_by":1,"updated_at":1504590254300,"updated_by":1},{"id":4,"uuid":"faf7f5e4-193b-4c00-b189-45b8505e2abe","key":"displayUpdateNotification","value":"0.11.11","type":"core","created_at":1420711400947,"created_by":1,"updated_at":1504590254302,"updated_by":1},{"id":5,"uuid":"0002fef2-1d6b-49e2-a27f-9e034e126a5f","key":"title","value":"SneakyCode","type":"blog","created_at":1420711400947,"created_by":1,"updated_at":1421000493182,"updated_by":1},{"id":6,"uuid":"bba1cba8-47ed-4e40-bb63-9e7eebb40e61","key":"description","value":"Pieter Koornhof on Domain Driven Design, Clean Code and .Net","type":"blog","created_at":1420711400947,"created_by":1,"updated_at":1421000493184,"updated_by":1},{"id":7,"uuid":"a36ccb94-0dae-464d-a33c-626bf8db6d9e","key":"email","value":"koornhof.pieter@gmail.com","type":"blog","created_at":1420711400949,"created_by":1,"updated_at":1421000493185,"updated_by":1},{"id":8,"uuid":"bbadad01-3af3-455c-8034-ebbe21260efc","key":"logo","value":"","type":"blog","created_at":1420711400949,"created_by":1,"updated_at":1421000493186,"updated_by":1},{"id":9,"uuid":"edc25a06-f69c-466a-807d-2f1a1a043907","key":"cover","value":"","type":"blog","created_at":1420711400949,"created_by":1,"updated_at":1421000493187,"updated_by":1},{"id":10,"uuid":"439e6fd3-e59d-499e-bed1-dff937fad154","key":"defaultLang","value":"en_US","type":"blog","created_at":1420711400949,"created_by":1,"updated_at":1421000493188,"updated_by":1},{"id":11,"uuid":"8ab72949-afa4-44c7-b4c7-002f1293a5a0","key":"postsPerPage","value":"5","type":"blog","created_at":1420711400950,"created_by":1,"updated_at":1421000493189,"updated_by":1},{"id":12,"uuid":"54f2bf0e-886d-4613-a4ed-8456fd87e6cd","key":"forceI18n","value":"true","type":"blog","created_at":1420711400950,"created_by":1,"updated_at":1421000493190,"updated_by":1},{"id":13,"uuid":"f1f44836-3486-4dcc-9988-f8e29aa77723","key":"permalinks","value":"/:slug/","type":"blog","created_at":1420711400950,"created_by":1,"updated_at":1421000493191,"updated_by":1},{"id":14,"uuid":"650edf4c-f534-4f41-97c1-56e93028b66e","key":"ghost_head","value":"","type":"blog","created_at":1420711400950,"created_by":1,"updated_at":1421000493193,"updated_by":1},{"id":15,"uuid":"6770c3b0-1e92-4956-bd42-3a8efddce9ac","key":"ghost_foot","value":"","type":"blog","created_at":1420711400951,"created_by":1,"updated_at":1421000493195,"updated_by":1},{"id":16,"uuid":"fc3cd36c-4898-416e-ad27-bb9f43d5c7e8","key":"activeApps","value":"[]","type":"app","created_at":1420711400951,"created_by":1,"updated_at":1420989947500,"updated_by":1},{"id":17,"uuid":"dd1423ad-d1e8-479c-b259-3a80445c394c","key":"installedApps","value":"[]","type":"app","created_at":1420711400951,"created_by":1,"updated_at":1494240262130,"updated_by":1},{"id":18,"uuid":"95fe4f05-52fe-4940-90cf-d657eeced1e5","key":"activeTheme","value":"sneakycode_ghost","type":"theme","created_at":1420711400951,"created_by":1,"updated_at":1421000493192,"updated_by":1}],"tags":[{"id":1,"uuid":"ea344de9-a809-4de6-8b08-ef46477fecba","name":"Getting Started","slug":"getting-started","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420711399736,"created_by":1,"updated_at":1420711399736,"updated_by":1},{"id":2,"uuid":"2ce4e076-b27b-4476-ae58-805224b497e4","name":"git","slug":"git","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420989947277,"created_by":1,"updated_at":1420989947277,"updated_by":1},{"id":3,"uuid":"88da9017-15b6-436d-a32f-d54fb742bd6c","name":"source control","slug":"source-control","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420989947279,"created_by":1,"updated_at":1420989947279,"updated_by":1},{"id":4,"uuid":"6e7c66a3-b9a6-4d9f-9f8e-51d1d5a975c5","name":"clean code","slug":"clean-code","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420989947281,"created_by":1,"updated_at":1420989947281,"updated_by":1},{"id":5,"uuid":"f1fe8622-83d3-414a-9a01-3755c0286ab2","name":"c#","slug":"c","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420989947281,"created_by":1,"updated_at":1420989947281,"updated_by":1},{"id":6,"uuid":"c697ccbc-0f62-465e-8ce6-87e710819079","name":"csharp","slug":"csharp","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420989947282,"created_by":1,"updated_at":1420989947282,"updated_by":1},{"id":7,"uuid":"cc497c89-865c-4fce-8d8d-89c6086762b4","name":"signalR","slug":"signalr","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420989947283,"created_by":1,"updated_at":1420989947283,"updated_by":1},{"id":8,"uuid":"600ed46b-795f-47fb-95fe-1458c99be05e","name":"hello world","slug":"hello-world","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420989947284,"created_by":1,"updated_at":1420989947284,"updated_by":1},{"id":9,"uuid":"26da3099-7964-457d-b92d-72adc5248ce1","name":"javascript","slug":"javascript","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1420989947285,"created_by":1,"updated_at":1420989947285,"updated_by":1},{"id":10,"uuid":"42063d23-6b51-4a0f-badf-758785520410","name":"Resolutions","slug":"resolutions","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421000984702,"created_by":1,"updated_at":1421000984702,"updated_by":1},{"id":11,"uuid":"5fd11d75-b225-488a-862c-ca2c02cdb410","name":"2015","slug":"2015","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421000984702,"created_by":1,"updated_at":1421000984702,"updated_by":1},{"id":12,"uuid":"543581e5-973f-42e9-9147-7e105c03d976","name":"new year","slug":"new-year","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421000984703,"created_by":1,"updated_at":1421000984703,"updated_by":1},{"id":13,"uuid":"ece529e0-8fbf-4862-b11b-04bafef64a78","name":"js","slug":"js","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421165484941,"created_by":1,"updated_at":1421165484941,"updated_by":1},{"id":14,"uuid":"36f03001-2060-4dff-a648-9f1363f1b19c","name":"asp.net","slug":"asp-net","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421165484943,"created_by":1,"updated_at":1421165484943,"updated_by":1},{"id":15,"uuid":"cf58e0b1-2b80-4843-bd23-b7757adf43d4","name":"Domain Driven Design","slug":"domain-driven-design","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421558839918,"created_by":1,"updated_at":1421558839918,"updated_by":1},{"id":16,"uuid":"6e6a004d-4faf-4977-9179-4a2d655fa2c8","name":"DDD","slug":"ddd","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1421558839920,"created_by":1,"updated_at":1421558839920,"updated_by":1},{"id":17,"uuid":"f9105765-6f6d-4924-b6cc-55e6e6e41a28","name":"Application Design","slug":"application-design","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1422106277322,"created_by":1,"updated_at":1422106277322,"updated_by":1},{"id":18,"uuid":"ef502bb3-f3fc-4f01-92d2-65211b329570","name":"comments","slug":"comments","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1422893132946,"created_by":1,"updated_at":1422893132946,"updated_by":1},{"id":19,"uuid":"b413a02e-12e9-4f06-9f74-f2bd8bb5fc74","name":"Entity","slug":"entity","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1423080208823,"created_by":1,"updated_at":1423080208823,"updated_by":1},{"id":20,"uuid":"e0fd61c0-e0bc-4aef-95f6-549ce05ec915","name":"Identity","slug":"identity","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1423080208828,"created_by":1,"updated_at":1423080208828,"updated_by":1},{"id":21,"uuid":"4dc5fc77-cf7e-4e56-a7fd-2ef31cc2ea5f","name":"Value Objects","slug":"value-objects","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1423683952464,"created_by":1,"updated_at":1423683952464,"updated_by":1},{"id":22,"uuid":"35c37876-9816-4639-9c54-95903a56394f","name":"immutability","slug":"immutability","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1423683952467,"created_by":1,"updated_at":1423683952467,"updated_by":1},{"id":23,"uuid":"2e14b9f2-dfe8-482a-bd09-f135d955a7c0","name":"ChatOps","slug":"chatops","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1425474201234,"created_by":1,"updated_at":1425474201234,"updated_by":1},{"id":24,"uuid":"9807723d-e64f-4938-974c-e94476caeaf0","name":"DevOps","slug":"devops","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1425474201236,"created_by":1,"updated_at":1425474201236,"updated_by":1},{"id":25,"uuid":"366caf96-99d1-4252-9a2d-bef08e404451","name":"Hubot","slug":"hubot","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1425474201237,"created_by":1,"updated_at":1425474201237,"updated_by":1},{"id":26,"uuid":"66babae4-ce80-416a-bc9f-a0a13ac6aa65","name":"Aggregates","slug":"aggregates","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1426189900012,"created_by":1,"updated_at":1426189900012,"updated_by":1},{"id":27,"uuid":"e7ef61f1-cb58-4afb-b1cd-fa140b9489be","name":"F#","slug":"f","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1426603937890,"created_by":1,"updated_at":1426603937890,"updated_by":1},{"id":28,"uuid":"f5632664-4c47-4459-bc4c-a50dd4036896","name":"FSharp","slug":"fsharp","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1426603937891,"created_by":1,"updated_at":1426603937891,"updated_by":1},{"id":29,"uuid":"a1e297e9-c727-4626-98c5-53a7ca53b783","name":"Anemic Domain","slug":"anemic-domain","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1429202689752,"created_by":1,"updated_at":1429202689752,"updated_by":1},{"id":30,"uuid":"9b77fda9-e913-4197-93a2-6a65eea08adb","name":"Rich Domain","slug":"rich-domain","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1429202689752,"created_by":1,"updated_at":1429202689752,"updated_by":1},{"id":31,"uuid":"1911a144-fee3-4145-b6bd-8008ba985e91","name":"Update","slug":"update","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1436376401253,"created_by":1,"updated_at":1436376401253,"updated_by":1},{"id":32,"uuid":"7ed30659-ba56-448b-8a0d-74e9f7d1d842","name":"jsinsa","slug":"jsinsa","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1436376401254,"created_by":1,"updated_at":1436376401254,"updated_by":1},{"id":33,"uuid":"e67e1873-d682-4e84-82e0-fb40c78fa45c","name":"pluralsight","slug":"pluralsight","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1436376401254,"created_by":1,"updated_at":1436376401254,"updated_by":1},{"id":34,"uuid":"88b17804-bc23-4457-9f0c-7a02c97a4d71","name":"ubiquitous language","slug":"ubiquitous-language","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1440020136322,"created_by":1,"updated_at":1440020136322,"updated_by":1},{"id":35,"uuid":"df03d3a9-6c88-4ca7-a9f6-53390ee12c9d","name":"dependency injection","slug":"dependency-injection","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1456820108532,"created_by":1,"updated_at":1456820108532,"updated_by":1},{"id":36,"uuid":"5ed76a39-57d5-4b60-b0f3-6ff8b4f8fc3f","name":"ioc","slug":"ioc","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1456820108533,"created_by":1,"updated_at":1456820108533,"updated_by":1},{"id":37,"uuid":"43582d43-f3be-4789-9848-7b05911c62f5","name":"castle windsor","slug":"castle-windsor","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1456820108534,"created_by":1,"updated_at":1456820108534,"updated_by":1},{"id":38,"uuid":"43e647db-e250-40bb-9f7d-da68134cb42a","name":"Event Sourcing","slug":"event-sourcing","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461266835554,"created_by":1,"updated_at":1461266835554,"updated_by":1},{"id":39,"uuid":"2320e5f6-758b-48fa-8045-a996c0bde82e","name":"Accidental Complexity","slug":"accidental-complexity","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461266835556,"created_by":1,"updated_at":1461266835556,"updated_by":1},{"id":40,"uuid":"20b622bb-b6eb-42ae-b53d-7f1277cd7c85","name":"DevDay","slug":"devday","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461266835557,"created_by":1,"updated_at":1461266835557,"updated_by":1},{"id":41,"uuid":"da00b93f-3770-4ebf-9f69-722b60e7c21e","name":"Talks","slug":"talks","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1461266835558,"created_by":1,"updated_at":1461266835558,"updated_by":1},{"id":42,"uuid":"48ecdf7f-5457-4b17-b5f8-4615f8f20a2a","name":"Database","slug":"database","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1462391174851,"created_by":1,"updated_at":1462391174851,"updated_by":1}],"posts_tags":[{"id":31,"post_id":3,"tag_id":10},{"id":32,"post_id":3,"tag_id":11},{"id":33,"post_id":3,"tag_id":12},{"id":116,"post_id":4,"tag_id":2},{"id":117,"post_id":4,"tag_id":3},{"id":118,"post_id":5,"tag_id":2},{"id":119,"post_id":5,"tag_id":3},{"id":120,"post_id":7,"tag_id":2},{"id":121,"post_id":7,"tag_id":3},{"id":122,"post_id":7,"tag_id":4},{"id":123,"post_id":9,"tag_id":5},{"id":124,"post_id":9,"tag_id":6},{"id":125,"post_id":9,"tag_id":7},{"id":126,"post_id":9,"tag_id":8},{"id":127,"post_id":9,"tag_id":9},{"id":128,"post_id":9,"tag_id":13},{"id":129,"post_id":9,"tag_id":14},{"id":576,"post_id":10,"tag_id":15},{"id":577,"post_id":10,"tag_id":16},{"id":1018,"post_id":12,"tag_id":15},{"id":1019,"post_id":12,"tag_id":16},{"id":1020,"post_id":12,"tag_id":17},{"id":1029,"post_id":13,"tag_id":4},{"id":1030,"post_id":13,"tag_id":15},{"id":1031,"post_id":13,"tag_id":16},{"id":1032,"post_id":13,"tag_id":17},{"id":1129,"post_id":14,"tag_id":4},{"id":1130,"post_id":14,"tag_id":18},{"id":1315,"post_id":15,"tag_id":15},{"id":1316,"post_id":15,"tag_id":16},{"id":1317,"post_id":15,"tag_id":19},{"id":1318,"post_id":15,"tag_id":20},{"id":1400,"post_id":16,"tag_id":15},{"id":1401,"post_id":16,"tag_id":21},{"id":1402,"post_id":16,"tag_id":22},{"id":1411,"post_id":17,"tag_id":15},{"id":1412,"post_id":17,"tag_id":21},{"id":1413,"post_id":17,"tag_id":22},{"id":1414,"post_id":18,"tag_id":23},{"id":1415,"post_id":18,"tag_id":24},{"id":1416,"post_id":18,"tag_id":25},{"id":1417,"post_id":6,"tag_id":5},{"id":1418,"post_id":6,"tag_id":6},{"id":1433,"post_id":19,"tag_id":15},{"id":1434,"post_id":19,"tag_id":26},{"id":1498,"post_id":20,"tag_id":15},{"id":1499,"post_id":20,"tag_id":27},{"id":1500,"post_id":20,"tag_id":28},{"id":1549,"post_id":22,"tag_id":15},{"id":1550,"post_id":22,"tag_id":26},{"id":1551,"post_id":22,"tag_id":29},{"id":1552,"post_id":22,"tag_id":30},{"id":1557,"post_id":23,"tag_id":2},{"id":1558,"post_id":23,"tag_id":4},{"id":1579,"post_id":24,"tag_id":23},{"id":1580,"post_id":24,"tag_id":31},{"id":1581,"post_id":24,"tag_id":32},{"id":1582,"post_id":24,"tag_id":33},{"id":1595,"post_id":25,"tag_id":15},{"id":1596,"post_id":25,"tag_id":16},{"id":1600,"post_id":26,"tag_id":4},{"id":1601,"post_id":26,"tag_id":15},{"id":1602,"post_id":26,"tag_id":16},{"id":1603,"post_id":26,"tag_id":34},{"id":1608,"post_id":29,"tag_id":4},{"id":1609,"post_id":29,"tag_id":35},{"id":1610,"post_id":29,"tag_id":36},{"id":1611,"post_id":29,"tag_id":37},{"id":1712,"post_id":30,"tag_id":38},{"id":1713,"post_id":30,"tag_id":39},{"id":1714,"post_id":30,"tag_id":40},{"id":1715,"post_id":30,"tag_id":41},{"id":1772,"post_id":31,"tag_id":4},{"id":1773,"post_id":31,"tag_id":42}],"apps":[],"app_settings":[],"app_fields":[]}}]}
